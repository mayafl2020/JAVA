{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fnil\fcharset0 LucidaGrande-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid27}
{\list\listtemplateid28\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid28}
{\list\listtemplateid29\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid29}
{\list\listtemplateid30\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid30}
{\list\listtemplateid31\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid31}
{\list\listtemplateid32\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid32}
{\list\listtemplateid33\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid33}
{\list\listtemplateid34\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid34}
{\list\listtemplateid35\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid35}
{\list\listtemplateid36\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid36}
{\list\listtemplateid37\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid37}
{\list\listtemplateid38\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid38}
{\list\listtemplateid39\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid39}
{\list\listtemplateid40\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid40}
{\list\listtemplateid41\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid4001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid41}
{\list\listtemplateid42\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid42}
{\list\listtemplateid43\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid43}
{\list\listtemplateid44\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid44}
{\list\listtemplateid45\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid45}
{\list\listtemplateid46\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid46}
{\list\listtemplateid47\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid47}
{\list\listtemplateid48\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid4701\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid48}
{\list\listtemplateid49\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid4801\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid49}
{\list\listtemplateid50\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid50}
{\list\listtemplateid51\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid51}
{\list\listtemplateid52\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid52}
{\list\listtemplateid53\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid53}
{\list\listtemplateid54\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid54}
{\list\listtemplateid55\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid55}
{\list\listtemplateid56\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid56}
{\list\listtemplateid57\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid57}
{\list\listtemplateid58\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid58}
{\list\listtemplateid59\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid59}
{\list\listtemplateid60\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid5901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid60}
{\list\listtemplateid61\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid6001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid61}
{\list\listtemplateid62\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid6101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid62}
{\list\listtemplateid63\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid6201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid63}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}{\listoverride\listid28\listoverridecount0\ls28}{\listoverride\listid29\listoverridecount0\ls29}{\listoverride\listid30\listoverridecount0\ls30}{\listoverride\listid31\listoverridecount0\ls31}{\listoverride\listid32\listoverridecount0\ls32}{\listoverride\listid33\listoverridecount0\ls33}{\listoverride\listid34\listoverridecount0\ls34}{\listoverride\listid35\listoverridecount0\ls35}{\listoverride\listid36\listoverridecount0\ls36}{\listoverride\listid37\listoverridecount0\ls37}{\listoverride\listid38\listoverridecount0\ls38}{\listoverride\listid39\listoverridecount0\ls39}{\listoverride\listid40\listoverridecount0\ls40}{\listoverride\listid41\listoverridecount0\ls41}{\listoverride\listid42\listoverridecount0\ls42}{\listoverride\listid43\listoverridecount0\ls43}{\listoverride\listid44\listoverridecount0\ls44}{\listoverride\listid45\listoverridecount0\ls45}{\listoverride\listid46\listoverridecount0\ls46}{\listoverride\listid47\listoverridecount0\ls47}{\listoverride\listid48\listoverridecount0\ls48}{\listoverride\listid49\listoverridecount0\ls49}{\listoverride\listid50\listoverridecount0\ls50}{\listoverride\listid51\listoverridecount0\ls51}{\listoverride\listid52\listoverridecount0\ls52}{\listoverride\listid53\listoverridecount0\ls53}{\listoverride\listid54\listoverridecount0\ls54}{\listoverride\listid55\listoverridecount0\ls55}{\listoverride\listid56\listoverridecount0\ls56}{\listoverride\listid57\listoverridecount0\ls57}{\listoverride\listid58\listoverridecount0\ls58}{\listoverride\listid59\listoverridecount0\ls59}{\listoverride\listid60\listoverridecount0\ls60}{\listoverride\listid61\listoverridecount0\ls61}{\listoverride\listid62\listoverridecount0\ls62}{\listoverride\listid63\listoverridecount0\ls63}}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Java was developed by James Gosling in Sun Microsystems.It is platform independent language.This language was initially named as OAK and later renamed as Java\
\
Java versions\
1.0-Oak, 1.1-Java, 1.2-Playground, 1.3-Kestrel, 1.4-Merlin, 5-Tiger,6-Mustang, 7-Dolphin, Java 8, Java 9 Dolphin\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs26 \cf0 Java is a computer language that is Objet-Oriented,Class-based,Concurrent,Low Dependencies.\
\
Where is Java used?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8226 	}3 billion devices use Java Runtime Environment\
{\listtext	\uc0\u8226 	}To develop Android Applications\
{\listtext	\uc0\u8226 	}To develop Hadoop Applications\
{\listtext	\uc0\u8226 	}To develop business process management tools (BPM)\
{\listtext	\uc0\u8226 	}To develop web servers\
{\listtext	\uc0\u8226 	}To develop application servers\
{\listtext	\uc0\u8226 	}Java has been used to develop below frameworks: HIBERNATE,SPRING,APACHE HADOOP, STRUTS\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Languages before Java\
\
Before Java emerged as a programming language, there were many other programming languages :\
The C programming Language, C++,Microsoft VisualBasic 6.0\
C++ doesn\'92t provide efficient means for garbage collection, no built in support for threads, it gets complex when u want to develop a graphics rich applications not platform independent, memory allocation and de-location has to be done by the developer\
\
Features of Java\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Simple - Java was designed to be easy for professional programmer to learn and use effectively\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Portable - Applications written using Java are portable in the sense that they can be executed on any kind of computer contains any CPU or any operating system\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Object-Oriented- Java is true object oriented language.Everything is considered to be an \'93object\'94 and all operations are performed using these objects \
{\listtext	
\f1 \uc0\u9642 
\f0 	}Secure-Java Programs run inside virtual machine sandbox to prevent any activity from untrusted sources.No use of explicit pointer.\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Distributed-Java has a feature called Remote Method Invocation(RMI) using which a program can invoke method of another program across a network and get the output.\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Dynamic-Java programs carry with them substantial amounts of run-time type information that is used to verify and resolve accesses to objects at run time\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Robust-Java checks the code during the compilation time and run time also.Java completely takes care os memory allocation and releasing, which makes the Java program more robust.\
{\listtext	
\f1 \uc0\u9642 
\f0 	}High Performance-Java achieves high performance through the use of byte code which can be easily translated into native machine code.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Java Platform Independent\
Java Code(.Java)  ->  JavaC Compiler -> Byte Code(.class) -> JVM\
\
Bytecode and Java Virtual Machine (JVM)\
\
Java Bytecode is the form of instructions that the JVM executes\
\
Java Virtual Machine (JVM)\
\
Runs the bytecode. Makes Java platform independent.Handles memory management.\
\
Java Memory Management\
\
C++ has pointers.User can allocate memory to these pointers.If the pointer is accessed without allocating memory or invalid pointer is accessed then program crashes.These issues are removed from Java as Java does not have pointers.Complete memory management is handled by Kava itself.\
\
Heap and Garbage Collector\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	1.	}The memory area in JVM where objects are created is called Heap\
{\listtext	2.	}Heap is divided into two parts.Young space and old space\
{\listtext	3.	}The memory is freed during runtime by a special thread called Garbage Collector\
{\listtext	4.	}The Garbage Collector looks for objects which are no longer needed by the program and destroys them\
{\listtext	5.	}All the newly allocated objects are created in young space.Once the young space is full then garbage collector is called so that memory can be released\
{\listtext	6.	}If the object has lived for long in young space then it will be moved to old space.Once the old space is full, garbage collector is called to release the space in heap.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
How Java work?\
\
You writing a code you give it to your compiler, that compiles it, converted into a bytecode,given to JVM and JIT where it complies again converted to Object Code and run on your platform (platform independent)\
\
Java Source(.java)\'97> Java C Comiler \'97> Java Bytecode \'97>JVM(Java interpreter and JIT Compiler)\'97>Object Code\'97> \'93Java is easy\'94\
\
Compile Time Environment (\'93JavaSource(.java) +  Java Compiler + Java Bytecode(.class)\'94)\'97\'97>\
\
Java Bytecodes move locally or through network\
\
Run-time Environment (\'93Class Loader - Java Class Libraries, Bytecode Verifier)->Java Interpreter + Just in Time Compiler (JVM) \'97-> Runtime System \'97\'97> Operating System \'97\'97> Hardware\
\
What is bytecode?\
Bytecode is an intermediate code which gets generated when Java file is compiled using JavaC compiler.After compilation .class file is generated which contains the byte code.This code is platform independent.\
What is advantage of executing parallel threads/tasks at a time?\
When many tasks/threads run at the same time, performance of the system increases.\
\
\
Java installation \
\
Go to {\field{\*\fldinst{HYPERLINK "https://www.oracle.com/java/technologies/downloads/"}}{\fldrslt https://www.oracle.com/java/technologies/downloads/}}\
Download Java Platform(JDK) version 8 update 121 and install on your Windows system\
\
To set the permanent path of JDK in your system\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	1.	}Begin by going to My Computer Properties\
{\listtext	2.	}Click on Advanced system setting\
{\listtext	3.	}Click on Environment Variables option\
{\listtext	4.	}Select Path variable to edit\
{\listtext	5.	}Enter the path to bin folder inside JDK installed on your system\
{\listtext	6.	}(Default path is C:/ProgramFiles/Java/jdk1.8.0_121/biin)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
How to set permanent JAVA_HOME  path in Mac\
https://youtu.be/_gdpclEE-kA\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Java Data Types\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Primitive Data Types \
Integer- short ,long, byte, int\
Float- double, float\
Character-char\
Boolean-boolean\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Data Operations\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Arithmetic Operators + -  * / %(modulus)\
Unary Operators ++ Increment operator \'97 Decrement operator\
Relational Operators < <= > >= != ==\
Logical Operators && And         || Or        ! Not\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Required Software\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 JDK 1.8 64 bit or 32 bit according to your machine
\f2\b\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.oracle.com/java/technologies/downloads/#java8"}}{\fldrslt \cf0 https://www.oracle.com/java/technologies/downloads/#java8}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 \
Eclipse J2EE version for 64 bit or 32 bit according to your machine\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.eclipse.org/downloads/"}}{\fldrslt 
\f2\b\fs36 \cf0 https://www.eclipse.org/downloads/}}
\f2\b\fs36 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs26 \cf0 Open Eclipse,selct workspace\
Create a Project - New - Java Project- Select the version you want to work in - Create a Class -click public static void main\
Execute java Program - short cut ctrl + F11\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 Main method\
\
public static void main (String []  args)\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u8226 	}public  means this function is accessible globally across all the programs\
{\listtext	\uc0\u8226 	}static means without creating the object of a class, you can access this method.\
{\listtext	\uc0\u8226 	}void is the return type.This means main does not return any value\
{\listtext	\uc0\u8226 	}main is the function which will be called by JVM and String[] arg is the command line arguments\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 \
Program to add two numbers\
\
class  FirstProgram\
\{\
  public static void main (String[] args)\
  \{\
Int a = 20, b = 30, c;\
c = a + b;\
System.out.println(\'93Result is : \'93 + c );\
   \}\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Control Statements\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Selection Statements
\f0\b0  - if.. else    Switch.. Case\

\f2\b Iteration Statements
\f0\b0  - while      do.. While    for\

\f2\b Jump Statements
\f0\b0  - break     continue
\f2\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \
Program on if condition \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 class testif\
\{\
public static void main( String[] args )\
\{\
 Int balance = 10000;\
 Boolean withdraw;\
\
 If (balance < 0)\
  withdraw = false;\
 else\
  withdraw = true;\
\
System.out.println (\'93Can I withdraw : \'93 + withdraw);\
 \}\
\}\
 \
while-Loop: Program\
\
class WhileLoopDemo\{\
 \
 Public static void main(String[] args)\{\
Int I = 1;\
while(I <=10)\{\
 System.out.println(I);\
I++;\
   \}\
  \}\
\}\
\
\
for-Loop:Program\
\
class ForLoopDemo\
\{\
Public static void main (String[] args)\
\{\
        for(int I = 1; I <= 10; I++)\
        System.out.println(i);\
 \}\
\}\
\
Assignment - if Condition\
If condition\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to check if the candidate is eligible for voting or not (Hint: Check age)\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to check if the number is positive or negative\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Extend the previous program to check whether the given number is positive, zero, negative\
{\listtext	
\f1 \uc0\u9642 
\f0 	}(Hint: use if-else conditions)\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to find largest of two numbers\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to check given number is even or odd\
{\listtext	
\f1 \uc0\u9642 
\f0 	}(Hint use % operator)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Assignment- for -loop. **** do-while - loop ******* while -loop\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to print 10 even numbers and 10 odd numbers\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to find factorial of a number\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to generate tables of 10\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to add the digits of a number\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Write a program to generate 10 Fibonacci numbers\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Data handling and functions\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 Arrays
\f0\b0\fs24 \
An array is a data structure which holds the sequential elements of the same type\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\uc0\u8226 	}Array always starts from index 0\
{\listtext	\uc0\u8226 	}Each index in the array holds a value\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Why do we use Arrays?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\uc0\u8226 	}Arrays are an important structure to hold date\
{\listtext	\uc0\u8226 	}Java allows us to hold many objects of the same type using arrays and it can be used with the help of a loop to access the elements by their index\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Declaring Arrays\
Array can be declared in multiple way\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	1.	}int [] a = new int [5]; index has to be given in squared brackets\
{\listtext	2.	}int a [] = new int [5];\
{\listtext	3.	}int [] a = \{1,2,3,4,5\};\
{\listtext	4.	}int []a = new int [] \{1,2,3,4,5\};\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\uc0\u8226 	}Arrays can be declared for primitive and non-primitive data types\
{\listtext	\uc0\u8226 	}\
{\listtext	\uc0\u8226 	}Instead of declaring int a1,a2,a3\'85,a100 we can declare int a[100]\
{\listtext	\uc0\u8226 	}It is fast and efficient to access an element in an array using the corresponding index without actually traversing through the entire array\
{\listtext	\uc0\u8226 	}The size of the array is fixed once it is created\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 For Example:A character array of 10 characters can be declared as\
       char[] ch = new char [10];\
\
Single dimensional Array\
\
Initialization int x[] = new int[12]\
Value 1,2,3,4,5,6,7,8,9,10,11,12\
System.out.print(a[5]);  Output 6\
\
Multi dimensional Array\
\
Initialization int x [ ][ ] = new int [5][5];\
\
class arrant\
\{\
public static void main(String[] args)\
\{\
Int I;\
Int [] a = \{10,20,30,40,50\};\
for (i =0;i < 5; i ++)\
System.out.println(a[I]);\
\}\
\}\
This program declares an array \'91a\'92 and initializes it with numbers 10,20,30,40 and 50\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\uc0\u8226 	}Multi dimensional arrays can be 2 dimensional as rows and columns similar to a matrix\
{\listtext	\uc0\u8226 	}It could be 3 dimensional with depth, height and breadth\
{\listtext	\uc0\u8226 	}Or it could be \'92n\'92 dimensional array as per requirement \
{\listtext	\uc0\u8226 	}Usually 2 dimensional arrays are used to perform matrix operations\
{\listtext	\uc0\u8226 	}Like single dimensional arrays, multi dimensional arrays can be of primitive and non primitive data type\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Multi-dimensional arrays can be declared as\
Int [] [] a = new int [2] [2];\
char [] [] a = new char [3][2];\
float [] [] a = new float [5][5];\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	1.	}How many bytes are allocated for array x? Int x [] [] = new int [5] [5];                                                     An int element takes 4 bytes and array x can store 25 int elements .Hence total number of bytes taken by x is 25*4 = 100\
{\listtext	3.	}Can we do multi dimensional array operations in single dimensional array?If yes, then why do we require multi dimensional array?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 We can perform all the operations of multi dimensional array in single dimensional array ,but when the data has more than one dimension it will be easier to perform operations in multi dimensional array.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Function \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 A function/method has group of statements to be executed.A function has a task to perform\
A function is declared as \
Public static void Hello(int a, int b)\
\
Scope specifier- This option specifies the visibility of the function.It could be public,private,protected or default\
Modifier - This will change the meaning of the function.Some of the options could be final, static, native, synchronized\
Return type  This option specifies the data that will be returned by the function.It could be primitive data type or object\
Arguments This is optional but can be used.Using this one can pass values to the function for computation\
Function name it is the name given to the function.Using function name, functions can be invoked\
\
Different Types of functions\
We use functions to provide different kinds of functionality\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls14\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}absolute(). To find the absolute value of a number\
{\listtext	
\f1 \uc0\u9642 
\f0 	}square() to find the square of a number\
{\listtext	
\f1 \uc0\u9642 
\f0 	}sqrt() to find the square root of a number\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
What happened when a Function is invoked?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	1.	}When a function is called from the main method, main method() address is stored on top of the stack\
{\listtext	2.	}Control jumps to execute the function\
{\listtext	3.	}After executing the function, main method address is popped from the stack and main method execution resumes\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
 Function Calling Ways\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Call by Value- When primitive data type is passed as an argument to the function it is call by value\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Call by Reference - if the Object of a class is passed as a parameter to a function then it is call by reference\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Call by Value\
public class pow \
\{\
//function to return square of a given number\
Int static square (int x)\
\}\
Int y = x*x;\
return y;\
\}\
public static void main (String[] args)\
\{\
Scanner sc = new Scanner(System.in);\
System.out.println(\'93Please enter a number \'85\'94);\
Int n = sc.next Int();\
Int result = pow.square(n);\
System.out.println(\'93Square of \'93 + n + \'93 is \'93 + result);\
\}\
\}\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf0 {\listtext	\uc0\u8226 	}When value of the primitive data type is passed as an argument from the calling function, data is being sent to the function\
{\listtext	\uc0\u8226 	}At the receiving ends new variable is created and the data is copied.This is call by value.\
{\listtext	\uc0\u8226 	}All the programs we have done till now is done using call by value\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Call by Reference\
\
When an object is passed as an argument to the function, its address is being passed so that any modification to the object will reflect in the object itself.This is call by reference.\
\
Public class callByReference \
\{\
Int data = 20;\
Public void functionDemo(callByReferencet est)\
\{\
test.data = test.data * 2;\
\}\
public static void main (String[] args)\{\
callByReference c1 = new callByReference();\
System.out.println(\'93Before calling the function : \'93 + test.data);\
c1.functionDemo(c1);\
System.out.println(\'93After calling the function : + test.data);\
\}\
Before calling the function = 20, after =40\
\
Polymorphism means the system behaves differently in different programming context\
Types of Polymorphism\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	1.	}Static Polymorphism- Function overloading is known as static time or compile time polymorphism\
{\listtext	2.	}Run Time Polymorphism-Inheritance is known as run time polymorphism\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Function Overloading\
If many functions/methods have the same name but different arguments it is called Function Overloading\
Int square (int x);\
double square (double x);\
Function overloading doesn\'92t depend on return type.It is differentiated only by the arguments of the function.\
For example if the user creates two methods with same name and argument list but makes change in only return type then the method will not be overloaded and will result in syntax error.\
\
\
Why do we use String?\
\
If we declare character arrays then we have to write string handling methods by ourselves like length of the string, copy string, copying string, getting part of the string(sub string) etc\
\
String class is given in Java to handle multiple characters/String and many methods are given in this class to handle the Strings\
char \'97> Single character \
String\'97\'97> multiple Character\
\
String is a class in Java to store string data.You can assign string data simplify defining the string object and assign the string like this:\
\
String str;\
String str = \'93Edureka\'94;\
String str = new String();\
String str = new String(\'93Edureka\'94);\
You can concatenate two string using + symbol\
\
String Functions\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0\cf0 {\listtext	1.	}length() Returns the length of the string\
{\listtext	2.	}charAt(int) Returns a character at the specified position.Index of the String starts from 0\
{\listtext	3.	}concat(String str) it concatenates the string with the string object.It is same as using \'91+\'92 operator for concatenation\
{\listtext	4.	}equals(String str) Checks whether string object and str and return true if they are same else returns false\
{\listtext	5.	}EqualsIgnoreCase(String str) Same as other function except that this function ignores the case and checks for the equality of the strings\
{\listtext	6.	}IndexOf(String str) Returns the index of the specified string in the string object\
{\listtext	7.	}replace(char ch,char ch1) Replaces the character ch with Character ch1 in the string\
{\listtext	8.	}lastIndexOf(String str) returns last index of a string\
{\listtext	9.	}toLowerCase() Converts the given string to lowercase\
{\listtext	10.	}toUpperCase() Converts the given string to uppercase\
{\listtext	11.	}trim() Removes the leading and trailing spaces of the string\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
String Buffer is also a Java class to store a string.String Buffer is mutable,that means the same StringBuffer object can be modified without new memory location\
String is read only and immutable:This means, once the string object is defined and assigned a value, it can\'92t be modified in the same memory location.If it is modified, then a new memory location is allocated for the new string object\
\
When should we use String and StringBuffer?Why?\
When we don\'92t need to modify string objects then String can be used else using StringBuffer is a better option since it\'92s mutable\
\
class StringBufferDemo\
\{\
public static void main(String[] args)\{\
StringBuffer str1 = new StringBuffer(\'93Hello\'94);\
StringBuffer str2 = new StringBuffer(\'93World\'94);\
\
str1.append(str2);\
System.out.println(\'93Appended string is: \'93 + str1);\
\}\
\}\
HelloWorld\
\
Strin Builder is the same as String Buffer except that String Buffer is not thread safe (not Synchronised).That means data is not safe when multiple threads run at the same time\
StringBuilder sb = new StringBuilder();//creates empty builder, capacity 16\
sb.append(\'93Greetings\'94);//adds 9 character string at the beginning\
Will produce a string builder with a length of 9 and a capacity of 16.\
\
String Builder Constractors\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	\uc0\u8226 	}StringBuilder() Creates an empty string builder with a capacity of 16\
{\listtext	\uc0\u8226 	}StringBuilder(CharSequence cs) Constructs a string builder coontaining the same characters as the specified CharSequence,plus an extra 16 empty elements trailing the CharSequence\
{\listtext	\uc0\u8226 	}StringBUilder(int initCapacity) Creates an empty string builder with the specified initial capacity\
{\listtext	\uc0\u8226 	}StringBuilder(String s) Creates a string builder whose value is initialized by the specified string, plus an extra 16 empty elements trailing th string\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Classes and Objects\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 A class is the blueprint from which specific objects are created\
Anything that has a state and behavior is object\
\
Atributes and Methods\
\
Atributes are state of an object\
Methods are behavior of an object\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 OOPS-Use Cases
\f0\b0\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 A software development company develops a project for insurance company.After completing the design and during the mid phase of the coding, insurance company gives changes in the requirements.Since software development firm is using System Analysis and Design Software engineering process, it was difficult to handle the changes .Later on software company implemented the code using Object oriented programming, hence they are able to make changes easily.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Object Oriented Programming is based on objects or real time entity or real world entities.Object has attributes and methods.Any new method can be added or deleted easily in an object/a class just by adding it/deleting it.Hence,Object oriented program can accommodate changes given by the Insurance company easily.
\f2\b \
\
Classes in Java
\f0\b0 \
A Class in Java is defined using the keyword \'93class\'94\
Public class student\{\
Int reg_no;\
String name;\
String stream;\
Void Study()\{\
\}\
Void WriteExams()\{\
\}\
\}\
\
Objects in Java\
Objects to a class is created by using the keyword \'93new\'94. New allocates memory for the object\
\
Student student_1 = new student();   Class Name,Object Name,Keyword(new) Constructor\
\
Here student_1 is the object of the class student\
With student_1 any of the method of the class can be invoked\
\
Why do we use Constructors\
\
Classes will have attributes.Before using them, if they need to be initialized then it has to be placed in a method and this method has to be called every time the object is being created.To avoid this process, a special function by the same name of the class is created for initializing.\
\
Where do we use Constructors?\
\
Constructors are used in all the cases where objects are being created.They are called wherever the class attributes requires initialization.\
\
Constructors\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	1.	}Used in the creation of an object\
{\listtext	2.	}A special method with no return type\
{\listtext	3.	}Must have the same name as the class it is in\
{\listtext	4.	}Used to Initialize the object\
{\listtext	5.	}If not defined, will initialize variables to default value\
{\listtext	6.	}A constructor resembles an instance method, but it differs from a method in that it has no explicit return type\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 How do constructors work?\
\
The moment object of a class is created, constructor of the class is called which initializes the class attributes\
Class\'97>Object\'97>Constructor\
\
What\'92s the difference between a regular function and a constructor?\
Constructor will not return any value a regular function can.Constructor will have the same name as the class but not the regular functions.\
\
public class student\{\
 Int reg_no;\
String name;\
String name;\
\
//Constructor\
student()\{\
 reg_no = 0;\
 name = \'93\'94;\
 stream = \'93\'94;\
\
System.out println(\'93In the constructor of student..\'94);\
\}\
Public static void main(String args []) \{\
 Student student_1 = new student();\
\}\
\}\
When student_1 object is created, student() constructor will be executed\
\
Constructors with parameters\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	1.	}Constructors can be called by sending parameters too while creating the object\
{\listtext	2.	}For example, student information can be passed on while creating the studentt object   student s1 = new student(10\'92\'94Maya\'94,\'94CS\'94)\
{\listtext	3.	}Here s1 is created by passing the student object details.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
What is Constructor Overloading & why do we use it?\
Constructor Overloading is not very different from method overloading\
Constructor overloading means that you have multiple constructors with same name but different signature\
\
Why do we use Constructor Overloading?\
We have different set of data which needs to be assigned or initialized while creating the object.With default constructor, it is not possible.Hence constructor overloading has to be used for initializing the object with various kinds/formats of data.Hence it provides flexibility\
\
Where do we use Constructor Overloading?\
\
Constructor Overloading is used in various places in Java\
\
How Constructor Overloading works?\
The moment object of a class is created, constructor of the class is called which initializes the class attributes\
The constructor that has been called will be used to initialize the object\
\
\
Inheritance\
\
Why do we use Inheritance?\
\
Since some common properties and methods are required by few classes hence they have to be implemented in all those classes.To avoid code redundancy a class is developed with common attributes and methods and it is used as a base class for the derived classes.\
\
Where do we use Inheritance?\
\
Inheritance can be used in all places where parental properties and methods are used\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls23\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}The child classes inherits all the attributes of the parent class\
{\listtext	
\f1 \uc0\u9642 
\f0 	}They also have their distinctive attributes\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
For example:\
Super Class - Animal\
Child Class -Reptiles, Amphibian, Mammal\
\
Class Animal \{\
//Type: Not Human \
//Lives: On Land\
// Gives Birth\
\}\
\
Class Aquatic extends Animal\
\{\
//Lives:In Water\
//Gives Birth:\
\}\
How it works?\
When an object of derived class is instantiated then first the base class object(with its attributes and methods) is created and then derived class object is created\
\
Class baseClass\{\
 Int x = 220;\
\
Public void displayX()\{\
     System.out.println(\'93Value of x:\'94 + x);\
\}\
\}\
Public class derivedClass extends baseClass\{\
\}\
Public static void main (String args[])\{\
derivedClass d1 = new derivedClass();\
D1.displayX;\}\
\}\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}In Java \'93extends\'94 keyword is used for extending the properties of base class to derived class\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Base class defines an attribute X and has a method displayX()\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Derived class is extending the base class and calling the displayX() to display the base class attribute\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Multiple inheritance is not possible in Java.This means, one class can not be derived from multiple classes\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Why do we need Inheritance?What are its advantages?\
Inheritance is used to reuse the common code present in class.For example class A can make use of another class B\'92s attributes and methods as if they are written class A.Modularity and code reusability are the advantages of inheritance.\
\
class baseClass \{\
Int x =  220;\
\
baseClass()\{\
System.out.println(\'93In the base class\'85\'94);\
\}\
\
public void displayX()\{\
System.out.println(\'93Value of x : \'93 + x);\
\}\
\}\
\
public class derivedClass extends baseClass\{\
 derivedClass()\{\
System.out.println(\'93In the derived class\'85\'94);\
\}\
\
public static void main(String args[])\{\
derivedClass d1 = new derivedClass();\
d1.displayX();\
\}\
\}\
\
Method Overriding\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls25\ilvl0\cf0 {\listtext	1.	}Writing the base class method in the derived class is called as Method Overriding\
{\listtext	2.	}The reason to have this is to have the implementation of the derived class for the same method name\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
What is the difference between method overloading and method overriding?When are they required and why are they used?\
Many methods having the same method name with different arguments/ parameters is called method overloading.Having the same method name in the base class and derived class is method overriding.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Abstract Class
\f0\b0\fs24 \
     \
Abstract Class Shapes \'97> class Rectangle extends Shape\'97> class Circle extends Shape\'97> class Triangle extends Shape\
\
abstract  is a keyword in Java\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	1.	}During the design, if the requirement is just to have a class as a base class and should not be instantiated by the user then abstract class can be modified \
{\listtext	2.	}It can be defined as abstract class HR\{\}\
{\listtext	3.	}Here HR class can\'92t be instantiated by the user.It can be used only as base class\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Abstract Class and Methods\
When a method is defined as abstract ,it will not have any body.A class derived from this class must implement all the abstract methods\
\
abstract class abstract1 \{\
   abstract void test();\
\}\
public class abstract_demo extends abstract1\{\
void test()\{\
System.out.println(\'93in the test\'85\'94);\
\}\
public static void main(String arg[])\{\
abstracts_demo a1 = new abstract_demo();\
a1.test();\
\}\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Final\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls27\ilvl0
\f0\b0\fs24 \cf0 {\listtext	\uc0\u8226 	}final is a keyword in Java. final keyword can be used for attribute, method or for a class\
{\listtext	\uc0\u8226 	}When final is used for attribute, it works as a constant\
{\listtext	\uc0\u8226 	}It can be defined as : final int x =230;\
{\listtext	\uc0\u8226 	}In the code, x value is defined as 230 and it can\'92t be changed in the entire program to some other integer. If done ,compiler will throw an error\
{\listtext	\uc0\u8226 	}When final is defined used for class then that class can\'92t be extended.That means it can\'92t be used for derived classes final class Employee\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Static\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Static is a keyword in Java.It can be used for an attribute or a method or a block\
Static attribute/method/block gets loaded when the class gets loaded.This is before the object gets created\
Static attribute/method/block is from class not from the object.Hence to access them object creation is not necessary\
\
public class static_demo\{\
     static int x = 230;\
\
public static void DisplayMessages()\{\
 System.out.println(\'93In the static function\'85\'94);\
\}\
static \{\
System.out.println(\'93In the static block\'85\'94);\
\}\
public static void main(String args[])\{\
System.out.println(\'93Value of static variable: \'93 + static_demo.x);\
static_demo.DisplayMessage();\
\}\
\}\
\
Following things can be marked as Static:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls28\ilvl0\cf0 {\listtext	\uc0\u8226 	}Methods\
{\listtext	\uc0\u8226 	}Variables\
{\listtext	\uc0\u8226 	}Nested Classes\
{\listtext	\uc0\u8226 	}Initialization Block\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Following things cannot be marked as Static:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls29\ilvl0\cf0 {\listtext	\uc0\u8226 	}Constructors\
{\listtext	\uc0\u8226 	}Classes\
{\listtext	\uc0\u8226 	}Interface\
{\listtext	\uc0\u8226 	}Method local INN.class\
{\listtext	\uc0\u8226 	}Inner Class methods and Variables\
{\listtext	\uc0\u8226 	}Local Variable\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 \
Why are Interfaces used?\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls30\ilvl0
\f0\b0\fs24 \cf0 {\listtext	\uc0\u8226 	}Interfaces are used to implement the expected behavior of a system/data type\
{\listtext	\uc0\u8226 	}Java does not support multiple inheritance, hence interfaces are implemented\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 A class can extend 1 class but implement many interfaces\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Interface\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls31\ilvl0
\f0\b0\fs24 \cf0 {\listtext	\uc0\u8226 	}An interface has a set of method declarations\
{\listtext	\uc0\u8226 	}It does not have the method body but only method declaration\
{\listtext	\uc0\u8226 	}To use an interface in a class, \'93implements\'94 keyword is used\
{\listtext	\uc0\u8226 	}In case you don\'92t override all the methods in the class the class has to be defined as abstract\
{\listtext	\uc0\u8226 	}An interface is same as class except class can be instantiated but interface cannot be \
{\listtext	\uc0\u8226 	}An interface can be defined by using interface keyword and the name of the interface\
{\listtext	\uc0\u8226 	}interface interface1()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Where do we use interfaces?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls32\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Any system which needs the expected functionality requires interfaces\
{\listtext	
\f1 \uc0\u9642 
\f0 	}For example,2 basic functions of a bank is deposit and withdraw.These two functions can be part of interfaces for banking application\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
interface Area\{\
public double area(double length, double breadth);\
\}\
public class rectangle implements Area\{\
@Override\
public double area (double length, double breadth)\{\
return length * breadth;\
\}\
public static void main(String[] args)\{\
rectangle ob = new rectangle();\
System.out.println(\'93Area of the rectangle is :\'94 + ob.area(10,10.5));\
\}\
\}\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls33\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Attributes can be defined in interfaces\
{\listtext	
\f1 \uc0\u9642 
\f0 	}These attributes can be used in the implemented class\
{\listtext	
\f1 \uc0\u9642 
\f0 	}The attribute values can\'92t be changed in the class as it acts like final variables\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Class\'97> Implements\'97>Interface = Class implementing Interface\
Interface->Implements->Abstract Class<-extends Subclass\
Class extending an Abstract class which implements an interface\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 Interfaces can be Extended\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \
Like the classes can be extended ,even interfaces can be extended\
Interface Area1 extends (Interface)Area1 if a class is implementing Area1 then all the methods of Area and Area1 should be implemented, as Area1 is extended from Area\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs28 \cf0 Pakages
\f0\b0\fs24 \

\f2\b\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Why Pakages?
\f2\b\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls34\ilvl0
\f0\b0\fs24 \cf0 {\listtext	\uc0\u8226 	}Programmers can easily determine that these classes are related\
{\listtext	\uc0\u8226 	}Programmers know where to find files of similar types\
{\listtext	\uc0\u8226 	}The names won\'92t conflict\
{\listtext	\uc0\u8226 	}You can have define access of the types within the package\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
What is Package\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls35\ilvl0\cf0 {\listtext	\uc0\u8226 	}A Java Package is a mechanism for organizing Java classes into namespaces\
{\listtext	\uc0\u8226 	}Programmers use package to organize classes belonging to the same category\
{\listtext	\uc0\u8226 	}Classes in the same package can access each other\'92s package access members\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Naming Convention of a Package\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls36\ilvl0\cf0 {\listtext	1.	}Package names are written in all lower case.(it is not mandatory)\
{\listtext	2.	}Companies use their reversed internet domain name to begin their package names.  com.example.mypackage for a package named mypackage\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
If the domain name contains a hyphen or a special character\
If the package name begins with a digits, illegal character reversed Java keyword such as int\
In this event the suggested convention is to add an underscore as follows:\
Hyphenated-name.example.org \'97> org.example.hyphenated_name\
example.imt \'97\'97> int_.example\
123name.example.com \'97> com.example_123name\
\
What can be the advantage of having all the related classes in one package?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls37\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}It is modularized\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Easy to handle.Easy to copy from one location to another\
{\listtext	
\f1 \uc0\u9642 
\f0 	}All the classes in the package can be loaded at one time import and * character\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Package and Import\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls38\ilvl0\cf0 {\listtext	\uc0\u8226 	}A package can have many classes and each class can have many methods\
{\listtext	\uc0\u8226 	}These methods can be used by another class in another package by using the keyword \'93import\'94\
{\listtext	\uc0\u8226 	}Syntax is : import<package name>,<class name>\
{\listtext	\uc0\u8226 	}Or import <package name>.*; This loads all the classes in the giving package\
{\listtext	\uc0\u8226 	}We can also import static members.For eg: import static java.lang.Math.PI.   import static java.lang.Math*;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Access Modifiers\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs28 \cf0 There are 4 Access Modifiers:\
\
Public Private Protected Default or package\
\
Access modifier specifies the scope/accessibility of a variable or a method or a class from the same class or from a different class or from a different package\
\
Data abstraction/hiding is one of the concept of OOP.This means client will not know the implementation details.This can be achieved through Access Modifier.For example if an attribute is made private then it can be accessed only in the class which defined it\
\
Public-When an attribute of method is declared as public then it can be accessed anywhere.Any package, any class accessibility is available\
\
Protected-When an attribute of a method is declared as protected then it is visible to all the classes in the same package and all subclasses in different package\
\
Private-If a Method, Variable or Constructor is defined as private then it can only be accessed within the declared class itself.Access is not available outside the class\
\
Default-When no access modifier is defined then it is said to have default access modifier.This attribute/method is used only in the given package.It is not accessible outside the package\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Exception\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 An exception is an event which occurs during the execution of a program, that disrupts the normal flow of the program\'92s instructions-Oracle\
It is often referred to as run time error.Bellow are few of them\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
ArithmeticException,ArrayIndexOutOfBoundsException,NullPointerException\
\
Types of Exception\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \
Checked Exceptions - Checked exceptions are checked at compile-time.It means if a method is throwing a checked exception then it should handle the exception using try-catch block or it should declare the exception using throws keyword, otherwise the program will give a compilation error\
\
Runtime Exceptions-Unchecked exceptions are not checked at compile time.It means if your program is throwing an unchecked exception and even if you didn\'92t handle/declare that exception, the program won\'92t give a compilation error.It is up to the programmer to judge the conditions in advance, that can cause such exceptions and handle them appropriately.All unchecked exceptions are direct sub classes of RuntimeException class\
Error-These are exceptional conditions that are external to the application, and that the application usually cannot anticipate or recover from.For example, if a stack overflow occurs, an error will arise.they are also ignored at the time of compilation.\
\
Exception Handling\
\
Mainly try,catch and finally are keywords for exception handling\
If there is a run time error then program is crashed and control comes out of the program\
\
Try-All the statements to be executed should be placed int he try block\
Catch-If there are any issues or runtime errors, control comes in catch block\
Finally-Whether successful or unsuccessful execution,statements int he finally block gets executed\
\
Public class ExceptionHandlign_demo\{\
\
Public static void main (String args[])\{\
Try\{\
Int a = 250,b =0;\
Int c =a/b;\
System.out.println(\'93Result is \'93 + c);\
\} catch (Exception e) \{\
System.out.println(\'93Exception is \'93 + e);\
\} finally\{\
System.out.println(\'93In the finally block\'85\'94);\
\}\
\}\
\}\
\
Program on Multiple Catch Blocks\
One try can have multiple catch blocks.In this scenarios, depends on the type of exception thrown corresponding catch block is invoked.\
Since all the exceptions are derived from Exception,catch (Exception e) should be placed at last.It can catch all the exceptions\
\
Nested try catch\
\
Sometimes a situation may arise where a part of a block may cause one error and the entire block itself may cause another error.In such cases, exception handlers have to be nested\
Try\
\{\
statement1;\
try\
\{\
satement1;\}\
catch(Exception e)\
\{\}\
\}\
Catch (Exception e)\
\{\}
\fs36 \

\fs24 \
Why throw?\
\
If there is a chance of a serious logic error or operational error then developer can also throw an exception.For example if we are developing software for elections.For voting, minimum age required is 18.If the voter\'92s age is bellow 18 then we can not continue any further ,as the basic requirement itself is not met, hence developer can throw an exception\
In banking application, one user account is blocked or closed and if the bank gets the cheque to clear the amount from this account then it is not possible to continue any further hence developer can throw an exception.All the possible scenarios, developer has to use the throw keyword to throw an exception\
\
Public void test() throws IOException,ArrayIndexOutOfBoundsException\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Program vs Process vs Thread\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Program:A Program is a set of instructions stored in the secondary storage device that are intended to carry out a specific job.It is read into the primary memory and executed by the kernel\
\
Process:An executing instance of a program is called a process.It is also referred as task\
\
Thread:A thread is called a \'93lightweight process\'94.It is similar to a real process but executes within the context of a process and shares but executes within the context of a process and shares the same resources allotted to the process by the kernel\
\
Multi Threading\
Every computer has multiple processes running at a time\
Thread is a task to be performed.Multi threading is multiple tasks getting executed at the same time in the same program/process\
Multi threading takes the same memory space for any number of threads\
\
Multi Threading and Extending Thread\
\
In Java a thread can be implemented in two ways:\
Extending from a thread class\'92implementing runnable interface\
\
Runnable Interface -Example\
Class Circle implements Runnable\
@Override\
Public void run()\{\
//Code goes here\
\}\
\}
\f2\b\fs36 \

\f0\b0\fs24 \
Need of Runnable Interface:\
In Java Inheritance is limited to one class only\
If a class non-thread class, then it can\'92t extend thread\
So to provide multi-threading into a class that already extends some other class, we use Runnable\
\
Constructors of Thread Class\
Thread()\
Thread(String name)\
Thread(Runnabel)
\fs28 \

\fs24 Thread(Runnabel,String)\
Thread(ThreadGroup,String)\
Thread(ThreadGroup,Runnable)\
Thread(ThreadGroup,Runnable,String)\
Thread(ThreadGroup,Runnable,String,long)\
\
Synchronization\
Synchronization is the coordination of events to operate a system in unison.Synchronization is achieved by the use of locks in Java\
\
Locks in Java\
A lock is a tool for controlling access to a shared resources by multiple threads\
Fat locks\
Lazy locks\
Thin locks\
Recursive locks\
Deadlock\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Collections
\f0\b0\fs24 \
\
Important inbuilt packages java.io,java.lang,java.util\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 Java.lang 
\f0\b0 \
This package provides the classes which are fundamental to Java language.Some of the classes in this package are:\
Byte,Character,Integer,Long,Float- Wrapper classes\
Main,String,StringBuffer,StringBUilder\
System\
Thread\
Exceptions\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls39\ilvl0\cf0 {\listtext	1.	}Math-The class Math contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions\
{\listtext	2.	}String-The String class represents character strings.All string literals in Java programs, such as \'93abc\'94, are implemented as instances of this class\
{\listtext	3.	}StringBuffer -A thread safe mutable sequence of characters.At any point of time, it contains some particular sequence of characters but the length and content of the sequence can be changed through certain method calls\
{\listtext	4.	}StringBuilder-A mutable sequence of characters.This class provides an API compatible with StringBuffer but with no guarantee of synchronization\
{\listtext	5.	}System-The System class contains several useful class fields and methods for standard input, standard output and error output streams etc.It cannot be instantiated\
{\listtext	6.	}Thread -A thread is a thread of execution in a program\
{\listtext	7.	}Exceptions-The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Why Wrapper Classes?\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls40\ilvl0\cf0 {\listtext	1.	}Since Java is an OO language sometimes it is required to send object instead of a primitive data type, in this case wrapper classes object is used\
{\listtext	2.	}For example in Collections like ArrayLIst collection classes can only store objects.Here primitive data type can\'92t be used\
{\listtext	3.	}If integer or character data is to be stored in collections then it\'92s corresponding objects are required.Hence wrapper classes are created\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
A Wrapper class wraps a data type and gives it an object appearance.This object can be used wherever the data type is required as an object.Wrapper classes has methods to unwrap the object and return the data type.\
Each of Java\'92s 8 primitive data types has a class dedicated to it.These are known as wrapper classes, because they wrap the primitive data type into an object of that class\
Wrapper class Primitive data type\
Byte    byte\
Short short\
Integer int\
Long  long\
Float.  Float\
Double double\
Character char\
Boolean boolean\
\
Integer I = new Integer(10);\
\
Features of Wrapper Classes\
\
We can use various class methods like converting integers to string\
This is one of the way to store primitive data type into object\
valueOf() is available in all the wrapper classes to get the value of given data into the Wrapper class data type\
\
Public class wrapper\{\
Public static void main(String[] args)\{\
Int I =10;\
//Creating Integer Object\
Integer intObject = new Integer(I);\
System.out.println(intObject);\
//Using class methods to convert int to string\
System.out.println(intObject.toString());\
\}\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 Java.io
\f0\b0 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls41\ilvl0\cf0 {\listtext	1.	}This package provides classes to perform IO operations using streams in Java\
{\listtext	2.	}A stream in Java is a sequence of bytes of undetermined length.It can be compared to water streams\
{\listtext	3.	}InputStreams class can be used to read the data from a data file\
{\listtext	4.	}OutputStream class can be used to write into a data file\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Reader:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls42\ilvl0\cf0 {\listtext	\uc0\u8226 	}BufferedReader\'97> LineNumberReader\
{\listtext	\uc0\u8226 	}CharArrayReader\
{\listtext	\uc0\u8226 	}InputStreamReader\'97\'97> FileReader\
{\listtext	\uc0\u8226 	}FilterReader\'97>PushbackReader\
{\listtext	\uc0\u8226 	}PipedReader\
{\listtext	\uc0\u8226 	}StringReader\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Writer:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls43\ilvl0\cf0 {\listtext	\uc0\u8226 	}BufferedWriter\
{\listtext	\uc0\u8226 	}CharArrayWriter\
{\listtext	\uc0\u8226 	}OutputStreamreader\'97>Filewriter\
{\listtext	\uc0\u8226 	}FilterWriter\
{\listtext	\uc0\u8226 	}PipedWriter\
{\listtext	\uc0\u8226 	}StringWriter\
{\listtext	\uc0\u8226 	}FilterWriter\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
InputStream\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls44\ilvl0\cf0 {\listtext	\uc0\u8226 	}FileInputStream\
{\listtext	\uc0\u8226 	}PipedInputStream\
{\listtext	\uc0\u8226 	}FilterInputStream \'97\'97> LineNumberInputStream,    DataInputStream, BufferedInputStream,      PushbackInputStream\
{\listtext	\uc0\u8226 	}ByteArrayInputStream\
{\listtext	\uc0\u8226 	}SequenceInputStream\
{\listtext	\uc0\u8226 	}StringBufferInputStream\
{\listtext	\uc0\u8226 	}ObjectInputStream\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
OutputStream\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls45\ilvl0\cf0 {\listtext	\uc0\u8226 	}FileOutputStream\
{\listtext	\uc0\u8226 	}PipedOutputStream\
{\listtext	\uc0\u8226 	}FilterOutputStream \'97\'97> DataOutputStream , BufferedOutputStream, BufferedInputStream\
{\listtext	\uc0\u8226 	}ByteArrayOutputStream\
{\listtext	\uc0\u8226 	}ObjectOutputStream\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 Program to read a file\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Import java.io*\
\
public class FileReadDemo\{\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0   
\f0\b0\fs24 public static void main (String[] args) throws IOException\{\
//file.txt present in c drive\
  \
  File file = new File (\'93c://data files//file.txt\'94);\
  FileInputStream fis = null;\
  try\{\
fis = new FileInputStream(file);\
Int input;\
//Reading the file\
while((input = fis.read()) != -1) \{\
//convert to char and display it\
System.out.print((char) input);\
\}\
\}catch (IOException e)\{\
E.printStackTrace();\
\}\
fis.close();\
\}\
\}\
\
Program to Copy one file to another\
\
Import java.io\
\
Public class FileWriteDemo\{\
Public static void main (String [] args ) throws IOException \{\
File file =. New File(\'93c://data files//file.txt\'94);\
FileInputStream fis = null;\
FileOutputStream fout = null;\
try\{\
 fis = new FileInputStream(file);\
fout = new FileOutputStream(\'93c://data files//edureka.txt\'94);\
Int content;\
while((content = fis.read()) != -1) \{\
fout.write(content);\
\}\
System.out.println(\'93File copied successfully\'85\'94);\
\} catch (IOException e) \{\
e.printStackTrace();\
\}\
Fis.close();\
Fout.close();
\f2\b\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 \}\
\}
\f2\b\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls46\ilvl0\cf0 {\listtext	\uc0\u8226 	}java.util\
\ls46\ilvl0
\f0\b0\fs24 {\listtext	\uc0\u8226 	}This package has all the utility classes required in Java program\
{\listtext	\uc0\u8226 	}All the collection classes which will be discussed in the next slides are part of java.util\
{\listtext	\uc0\u8226 	}Apart from collections it has following important classes:\
{\listtext	\uc0\u8226 	}Date \
{\listtext	\uc0\u8226 	}Scanner
\f2\b\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Collections\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Collections: provide set of classes to store and manipulate objects or group of objects\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls47\ilvl0
\f2\b\fs36 \cf0 {\listtext	\uc0\u8226 	}List\'97\'97>ArrayList\'97>LinkedList\'97>Vector\'97>Stack\
{\listtext	\uc0\u8226 	}Queue\'97> PriorityQueue\
{\listtext	\uc0\u8226 	}Duque\'97>ArrayDeque\
{\listtext	\uc0\u8226 	}Set\'97>HashSet\'97>LinkedHashSet\
{\listtext	\uc0\u8226 	}SortedSet\'97>TreeSet\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Important Collection classes are:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls48\ilvl0
\f2\b\fs36 \cf0 {\listtext	
\f3 \uc0\u9642 
\f2 	}ArrayList\
{\listtext	
\f3 \uc0\u9642 
\f2 	}Vector\
{\listtext	
\f3 \uc0\u9642 
\f2 	}HashSet\
{\listtext	
\f3 \uc0\u9642 
\f2 	}TreeSet\
{\listtext	
\f3 \uc0\u9642 
\f2 	}HashMap\
{\listtext	
\f3 \uc0\u9642 
\f2 	}Hashtable\
{\listtext	
\f3 \uc0\u9642 
\f2 	}Properties\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
ArrayList and Array\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Array is fixed and ArrayList is re-sizebale\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls49\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}ArrayList:\
{\listtext	
\f1 \uc0\u9642 
\f0 	}ArrayList is the implementation of List Interface\
{\listtext	
\f1 \uc0\u9642 
\f0 	}Array size is fixed but ArrayList size can grow dynamically\
{\listtext	
\f1 \uc0\u9642 
\f0 	}ArrayList is used to store objects and perform operations on it\
{\listtext	
\f1 \uc0\u9642 
\f0 	}ArrayList is not Synchronized.Vector is similar to ArrayList which is synchronized\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 \
If your application does not require insertion or deletion of elements,\
the most efficient data structure is the array\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls50\ilvl0
\f0\b0\fs24 \cf0 {\listtext	\uc0\u8226 	}ArrayList is declared as\
  ArrayList<Object to store> ArrayList object = new ArrayList<Object to store>();\
{\listtext	\uc0\u8226 	}The given program stores String objects.Prints all the objects of the ArrayList in new type of array\
{\listtext	\uc0\u8226 	}Removes the string object by name and position and displays the complete collection object\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 Methods in ArrayList\
boolean add(Object e)\
boolean addAll(Collection c)\
Object set(int index,Object element)\
Void add (int index, Object element )\
Object get(int index)\
Object remove(int index)\
Iterator iterator()\
Int indexOf()\
Int index (Object element)\
Listiterator listiterator()\
Int lastindexOf()\
Int size()\
\
How to trace the elements of ArrayList\
For-each Loop:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls51\ilvl0\cf0 {\listtext	\uc0\u8226 	}it\'92s action is similar to for-loop.It traces through all the elements of array or Arraylist\
{\listtext	\uc0\u8226 	}No need to mention size of Arraylist\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 for(String s: arraylist_name) \'97 > keyword, type of data stored in arraylist,name of array list\
\
Iterator\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls52\ilvl0\cf0 {\listtext	\uc0\u8226 	}Iterator is an interface that is used to traverse through the elements of collection\
{\listtext	\uc0\u8226 	}It traverses only in forward direction with the help of methods\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Iterator Methods\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls53\ilvl0\cf0 {\listtext	\uc0\u8226 	}Boolean hasNext()\
{\listtext	\uc0\u8226 	}element next()\
{\listtext	\uc0\u8226 	}void remove()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Iterator iterator = arraylist.iterator();\
while(iterator.hasNext())\{\
Object object = iterator.next();\
System.out.print(object +\'94 \'93);\
\}\
\
Listiterator\
Listiterator is an interface that traverses through the elements of the collection\
It traverses in both forward and reverse direction\
Listiterator Methods\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls54\ilvl0\cf0 {\listtext	\uc0\u8226 	}boolean hasNext()\
{\listtext	\uc0\u8226 	}element next()\
{\listtext	\uc0\u8226 	}void remove()\
{\listtext	\uc0\u8226 	}boolean hasPrevious()\
{\listtext	\uc0\u8226 	}element previous()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 //To modify object we use ListIterator\
ListIterator listiterator = arraylist.listIterator();\
while(listiterator.hasNext())\{\
Object object = listiterator.next();\
listiterator.set(\'93(\'93+ object + \'93)\'94);\
\}\
\
Enumeration\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls55\ilvl0\cf0 {\listtext	\uc0\u8226 	}Enumeration is an interface whose action is similar to iterator\
{\listtext	\uc0\u8226 	}But the difference is that it has no method for delaying an element or arraylist\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Enumeration Methods\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls56\ilvl0\cf0 {\listtext	\uc0\u8226 	}boolean hasMoreElement()\
{\listtext	\uc0\u8226 	}element nextElement()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Vector \
Vector is same as ArrayList.The only difference is that,Vector is synchronized but ArrayList is not.That means Vector \
Is ThreadSafe\
\
Import java.util.Vector\
public class arrayList\{\
public static void main(String[] args)\{\
//Declaring a Vector\
/* Constructor\'97> Vector(int size, int incr)\
The increment specifies the number of elements to allocate each time\
That a vector is resized upward*/\
Vector <Integer> v = new Vector<Integer>(3,2);\
//Adding elements to vector\
v.add(10);\
v.add(20);\
System.out.println(v.size());\
\}\
\}\
\
Queue \
PriorityQueue is a class which implements Queue interface and sorts the data stored.\
DeQue stands for double ended queue\
Queue operates on the principle of \'93First in First out\'94.The element which gets inserted in the beginning is the one which comes out first.The element which gets inserted in the las will come out last\
Queue is an interface\
The queue can be operated at both the ends.Same holds for Insertion and deletion too.\
\
Program on PriorityQueue\
This program inserts the data from 10 to 1 in the queue and displays it in a sorted order\
\
import java.util.PriorityQueue;\
\
Public class priorityQueue \{\
Public static void main(String[] args) \{\
PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\
for(int I = 10; I > 0;i \'97)\{\
pq.add(new Integer(I));\
\}\
for (int i = 1; I <=10; I++) \{\
Integer c = pq.poll();\
System.out.println(c);\
\}\
\}\
\
Set\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls57\ilvl0\cf0 {\listtext	\uc0\u8226 	}A set is a collection interface.HasSet and TreeSet are implemented from Set\
{\listtext	\uc0\u8226 	}Set cannot have duplicates\
{\listtext	\uc0\u8226 	}Class HashSet removes the duplicates and gives better performance over TreeSet.It doesn\'92t guarantee to store the data in the same order it is inserted\
{\listtext	\uc0\u8226 	}Class TreeSet sorts the added data apart from removing the duplicates\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
HashSet\
This program adds numbers into the HashSet and prints it.You can observe that 1 is inserted twice.As Hashing removes duplicates, it prints 1 only once and removes the second 1\
\
import java.util.HashSet;\
import java.util.Iterator;\
\
public class priorityQueue\{\
public static void main(String[] args) \{\
HashSet<Integer> hs = new HashSet<Integer>();\
hs.add(1);\
hs.add(1);\
hs.add(2);\
hs.add(3);\
hs.add(4);\
\
Iterator<Integer> it = hs.iterator();\
while(it.hasNext())\{\
 Int i = (Integer) it.next();\
System.out.println(i);\
\}\
\}\
\}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls58\ilvl0\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b\fs36 \cf0 TreeSet\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 This program adds names, sorts them and displays the names using TreeSet.Observe that Pamela is added twice in the collection.When printed Pamela will be displayed only once as the second entry is removed as duplicate entry by TreeSet\
\
Import.java.util.TreeSet;\
\
Public class priorityQueue\{\
Public static void main(String[] args)\{\
TreeSet<String> ts = new TreeSet<String>();\
ts.add(\'93Pamela\'94);\
ts.add(\'93Pamela\'94);\
ts.add(\'93Angelina\'94);\
ts.add(\'93Britney\'94);\
ts.add(\'93Shakira\'94);\
ts.add(\'93Fergie\'94);\
\
System.out.println(ts);\
\}\
\}
\f2\b\fs36 \
\

\f0\b0\fs24 Map and Classes Implementing Map Interface\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls59\ilvl0\cf0 {\listtext	\uc0\u8226 	}Map is an interface which has key value pair\
{\listtext	\uc0\u8226 	}An object is identified by a key.If key is passed, its corresponding object can be retrieved.It is like in an employee record, employee data is identified by employee id.Employee id is the key and employee data is the object\
{\listtext	\uc0\u8226 	}Some of the important classes of Map are HashMap and Hashtable\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
HashMap\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls60\ilvl0\cf0 {\listtext	\uc0\u8226 	}Implemented map interface which is used to perform operations such as inserting,deleting and locating elements in map\
{\listtext	\uc0\u8226 	}HashMap stores data as key value pair\
{\listtext	\uc0\u8226 	}It is unsorted and unordered\
{\listtext	\uc0\u8226 	}It is not synchronized\
{\listtext	\uc0\u8226 	}Map allows one null key and multiple null values\
{\listtext	\uc0\u8226 	}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Methods in HashMap\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls61\ilvl0\cf0 {\listtext	\uc0\u8226 	}Object put (Object key,Object value)\
{\listtext	\uc0\u8226 	}Enumeration elements()\
{\listtext	\uc0\u8226 	}boolean containsKey(Object key)\
{\listtext	\uc0\u8226 	}Object remove(Object key)\
{\listtext	\uc0\u8226 	}Enumeration keys()\
{\listtext	\uc0\u8226 	}Object get(Object keys)\
{\listtext	\uc0\u8226 	}boolean containsValue(Object key)\
{\listtext	\uc0\u8226 	}String toString()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 HashMap insertion\
\
//create a hash map\
\
HashMap hash map = new HashMap();\
//Putting elements\
hashmap.put(\'93John\'94,9634.58);\
hashmap.put(\'93Jack\'94,1283.48);\
hashmap.put(\'93Linda\'94,1458.10);\
hashmap.put(\'93Nancy\'94,199.11);\
\
HashMap-Display\
//Get an iterator\
Iterator iterator = hashmap.entrySet().iterator();\
\
//Display elements\
while(iterator.hasNext()) \{\
   Map.Entry = (Map.Entry) iterator.next();\
  System.out.println(entry.getKey() + \'93:\'94);\
 System.out.println(entry.getValue());\
\}\
\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls62\ilvl0\cf0 {\listtext	1.	}Hashtable is implemented from map interface which is used to perform operations such as inserting, deleting and locating elements similar to HashMap\
{\listtext	2.	}Hashtable is Synchronized.That is it is Thread safe\
{\listtext	3.	}It does not allow null keys or values, if inserted compiler throws NullPointerException\
{\listtext	4.	}Hashtable stores data as key values pair\
{\listtext	5.	}It is unsorted and unordered.This is due to hashing\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Methods in Hashtable\
Object put(Object key,Object value)\
Enumeration elements()\
Boolean containsKey(Object Key)\
Object remove(Object key)\
Enumeration keys()\
Object get(Object keys)\
boolean containsValue(Object key)\
String toString()\
\
Hashtable-Insertion\
\
//Create a hash map\
Hashtable hash table = new Hashtable();\
\
//Putting elements\
hashtable.put(\'93John\'94,965.33);\
hashtable.put(\'93Jack\'94,123.98);\
hashtable.put(\'93Linda\'94,1478.10);\
hashtable.put(\'93Nancy\'94,199.11);\
\
Why use Inner Classes\
Compelling reasons for using nested classes include following\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls63\ilvl0\cf0 {\listtext	\uc0\u8226 	}It is a way of logically grouping classes that are only used in one place: if a class is useful to only one other class, then it is logical to embed it in that class and keep the two together.Nesting such\'94helper classes\'94 makes their package more streamlined\
{\listtext	\uc0\u8226 	}It increase encapsulation: Consider two top level classes,A and B,where B needs access to members of A that would otherwise be declare private.By hiding class B within class A,A\'92s members can be declared private and B can access them.In addition, B itself can be hidden from the outside world\
{\listtext	\uc0\u8226 	}It can lead to more readable and maintainable code:\
{\listtext	\uc0\u8226 	}Nesting small classes within top-level classes places the code closer to where it is used\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Inner Classes\
Sometimes it is required to have an object inside another object in Object Oriented programming.This is possible through inner classes in Java.\
 Class outer\{\
Class inner\{\
Void test()\{\
system.out.println(\'93Int the inner class\'85\'94);\
\}\
\}\
\}\
public class wrapper\{\
public static void main (String args[])\{\
outer out = new outer();\
outer.inner ob = out.new inner();\
ob.test;\
\}\
\}\
\
\
}