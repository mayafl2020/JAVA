{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 LucidaGrande-Bold;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid701\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1901\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2001\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid27}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}}
\margl1440\margr1440\vieww11520\viewh3420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 What is Software Testing?
\f1\b0 \
\
Software Testing is a process, to evaluate the functionality of a software application, with an intent to find whether the developed software met the specified requirements or not, and to produce the bug free quality product.\
\

\f0\b Why testing?
\f1\b0 \
\
Cost of fixing the bug is larger if testing is not done in early stage.To produce good quality product.\
To make software application defect free.To check if behavior of application is same in development and production environment.\
\

\f0\b How much testing is enough?
\f1\b0 \
\
Selecting test conditions to cover the fundamental problem of testing.Number of test cases is infinite even for the simplest systems.Instead of trying all possible test cases, the goal of testing is to focus on the tests that give us the greatest value by covering the most important parts of the system.We could say sufficient coverage is done when we are able to balance the project constraints such as time and the budget.\
\

\f0\b Key activities in Software Testing
\f1\b0 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f0\b Test Planning
\f1\b0 - Establishing the scope, approach, intent, specific tasks in the intended test activities.\
{\listtext	\uc0\u8226 	}
\f0\b Test Control-
\f1\b0  Taking corrective actions to get a test project back on track in order to avoid further deviation from the project schedule.\
{\listtext	\uc0\u8226 	}
\f0\b Test Analysis 
\f1\b0 -Identifying what to test(components or functionality),choosing the test conditions we need to cover\
{\listtext	\uc0\u8226 	}
\f0\b Test Design
\f1\b0 -Determining how to test what we decided to test in the Test Analysis phase, we do this by transforming test cases to make it more generalized covering different conditions within the scope.\
{\listtext	\uc0\u8226 	}
\f0\b Test Implementation
\f1\b0 -Carrying out the remaining activities that are required to begin the test execution, such as developing and prioritizing test procedures, test data generation and setting-up the test environment.\
{\listtext	\uc0\u8226 	}
\f0\b Test Execution-
\f1\b0 In this we run our tests against test object\
{\listtext	\uc0\u8226 	}
\f0\b Checking results
\f1\b0 -As s part of test execution, we see actual results with respect to our test cases.We need to compare the outcomes with expected outcome to grade the test condition as pass/fail\
{\listtext	\uc0\u8226 	}
\f0\b Evaluating Exit Criteria
\f1\b0 -At a high level, exit criteria are a set of conditions that would allow some part of a process to complete.Exit criteria are fixed at the time of test planning.\
{\listtext	\uc0\u8226 	}
\f0\b Test result reporting
\f1\b0 -In test result reporting, we want to report our progress against exit criteria\'92s described above\
{\listtext	\uc0\u8226 	}
\f0\b Test Closure
\f1\b0 -Involves collecting test process data obtained from various test process activities
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Principles of Testing\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	1.	}
\f1\b0 Testing shows presence of defect but cannot prove there are no defects\
\ls2\ilvl0
\f0\b {\listtext	2.	}
\f1\b0 Exhaustive Testing is impossible, testing everything is not feasible.Instead of exhaustive testing, risk analysis and priorities should be used to focus the effort.\
\ls2\ilvl0
\f0\b {\listtext	3.	}
\f1\b0 Early Testing reduced the cost and workload exponentially, hence testing activities should be started as soon as possible in the software development lifecycle\
\ls2\ilvl0
\f0\b {\listtext	4.	}
\f1\b0 Defect Clustering-testing effort should be focused proportionally to the expected and later observed defect density in the modules, a small number of modules usually contain most of the defects\
\ls2\ilvl0
\f0\b {\listtext	5.	}
\f1\b0 Pesticide paradox - if the same set of test cases are run over and over agin, eventually the same test cases will no longer find any new defects.To overcome this new and revised test cases should be used after each cycle\
\ls2\ilvl0
\f0\b {\listtext	6.	}
\f1\b0 Testing is context dependent, testing is done differently in different context.For example, safety-critical software is tested differently for a net-banking website\
\ls2\ilvl0
\f0\b {\listtext	7.	}
\f1\b0 Absence of errors fallacy, finding and fixing defects doesn\'92t help if the system built is unusable and doesn\'92t fulfill user\'92s needs and expectations \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
Most popular SDLC models are:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	
\f2 \uc0\u9642 
\f0 	}Waterfall model 
\f1\b0 - each phase has to be completed before next phase starts.
\f0\b \
{\listtext	
\f2 \uc0\u9642 
\f0 	}Agile model
\f1\b0 -the testing is integrated in the development process and the testing happens throughout \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 the development process.
\f0\b \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	
\f2 \uc0\u9642 
\f0 	}Spiral model\
{\listtext	
\f2 \uc0\u9642 
\f0 	}V-Model
\f1\b0  the processes are executed in sequential manner, and each development phase is associated with a testing phase, that\'92s why is also called Verification and Validation Model\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
Different types of Testing\
\
Functional Testing - 
\f1\b0 is a kind of software testing which checks whether the application is providing all the functionalities that were mentioned in the functional requirement or specification document of that application.\
\
There are 8 levels of functional testing\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	1.	}Component Testing - searches for defects in and verifies functioning of software items, programs, modules, object, classes.It also called Unit,Module,Program testing\
{\listtext	2.	}Smoke Testing is performed as a preliminary activity to check whether all the critical functionalities of a program are working time.This is done to ensure the QA team doesn\'92t waist time on a bad build.\
{\listtext	3.	}Sanity Testing-is the surface level testing where QA engineer verifies that all the menus, functions, commands available in the product and project working fine.\
{\listtext	4.	}Integration Testing-tests interface between components and interaction between different parts of system such as OS,file system, hardware or interfaces between tests\
{\listtext	5.	}Interface Testing is concerned with testing the communication between two different software systems, in testing terms a connection that integrates two systems is called interface.\
{\listtext	6.	}System Testing is concerned with the behavior of the whole system/product as defined by the scope of development project or product.It may include tests based on system, functional or software requirements\
{\listtext	7.	}Acceptance Testing is done once the developers have fixed most of the defects, it involves testing the system based on user requirement, system requirement, uses cases, risk analysis and business process\
{\listtext	8.	}Regression Testing is process of testing changes in the program, to make sure the older program still works with new changes.Regression testing is done after iteration in the software or bug fixing.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
Non-Functional Testing-
\f1\b0 is a kind of Software testing which checks the attributes of the system or an application such as memory management, performance or health of the system.\
\
Non-functional Testing is equally important as Functional Testing.All the non functional parameters such as speed, security, reliability and efficiency of an application is tested under it.It makes an application robust and prepares it against vulnerabilities \
\
Performance testing evaluates if an application is performing as expected under normal workload\
Load testing evaluates the behavior of a software or an application when accessed by multiple users simultaneously \
Stress Testing is used to measure the system on its health and error handling under extremely heavy load conditions\
Volume Testing determines state of the system while handling different volumes of data from the database\
Security testing aims to uncover vulnerabilities of the system and evaluates if the data and resources are protected from non authenticated access\
Installation Testing checks if the installation of software is done correctly and software is working as expected after the installation \
Recovery Testing checks how well a software or an application can recover from certain points of failure, how well the data can be recovered if application crashes by some sort of system failure.\
Efficiency Testing calculates the utilization of resources during the development of software such hardware, manpower, expertise of test team and checks for maximum optimization\
\

\f0\b Black Box testing 
\f1\b0 is a software testing method in which the internal structure/design/implementation of the item being tested is not known to the tester\
Examples -Functional,Non-Functional,Regression Testing\
\

\f0\b White Box Testing 
\f1\b0 is a software testing method in which the internal structure/design/implementation is known to the tester\
Examples-Path ,Loop,Condition testing\
\

\f0\b Test-Case Design\
\
Specification Based Techniques \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0
\f1\b0 \cf0 {\listtext	
\f3 \uc0\u9642 
\f1 	}Boundary-value analysis-this test is done to explore errors at the boundary of input domain\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Equivalence Partitioning(EP) in this technique test inout data is portioned into n number of classes and a single instance of test data is picked from each class, this technique helps to reduce the total number of test cases\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Decision Table Testing -test cases are designed on the basis of decision tables that designed based indifferent combination of inputs and their corresponding outputs based on various conditions and scenarios adhering to different business rules.\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Use-Case Testing this technique is designed to execute different business scenarios and end user functionalities, use case testing is aimed at testing entire system\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  
\f0\b Structure Based techniques\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0
\f1\b0 \cf0 {\listtext	
\f3 \uc0\u9642 
\f1 	}Statement Testing and Coverage this test is done on all executable statements in the source code at least once.The percentage of executable statements is decided based on requirement \
{\listtext	
\f3 \uc0\u9642 
\f1 	}Decision and testing Coverage this technique is based on branches, each branch one of the possible branches is executed at least once so that all possible reachable code is executed at least once\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Condition Testing in this technique each Boolean condition is predicted as true or false, and all testing outcomes are tested at least once, test cases are designed in a way that condition outcomes are easily executed\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Multiple Condition testing is designed to test multiple combinations of the condition to get %100 coverage, two or more test scripts are required to ensure complete coverage\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\cf0 Experience Based Techniques \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	
\f2 \uc0\u9642 
\f0 	}Error Guessing 
\f1\b0  in this technique, the testers anticipate the errors based upon their experience, knowledge of product failure and availability of data.Error guessing is based on testers experience and intuition
\f0\b \
{\listtext	
\f2 \uc0\u9642 
\f0 	}Exploratory Testing 
\f1\b0 this technique is done in an informal manner without any formal documentation, minimun time is giving for test designing and maximum for test execution ,in this techniques, test design and execution are performed concurrently
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
UI Testing 
\f1\b0 aka GUI testing is  a process of testing system\'92s graphical interface, in the testing we mimic an end user to perform various functions and tasks.UI testing focuses on the end user experience, with specific focus on the look and feel of the application/software.As UI tester you should think like an end users new user would first observe the design and look of the application, the ease with which user is able to execute a task is important qualitative parameter which we gauge using UI testing.\
UI testing can be done in 3 ways\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	1.	}Manual Based Testing - Under this requirement the GUI components are manually checked by the user, the requirements are validated based upon business requirement document\
{\listtext	2.	}Record and Replay - GUI testing can be done using automation tools via the record and replay method, in this process a tester first records the actions or inputs acting like an end user, these steps are then replayed to test the software app.\
{\listtext	3.	}Model Based Testing-the run time behavior of software under test is checked against predictions made by a model.Testing is based upon different aspects of the system behavior such as DATA FLOW,CONTROL FLOW,DECISION TABLE,DEPENDENCY GRAPH,STATE TRANSITION MACHINES\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b API Testing
\f1\b0  -Application Programming Interface Testing is a process of testing the business logic layer.An API is made up of a set of functions and procedures that specify how various software components interact with one another.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 TEST DESIGN TECHNIQUES AND TEST EXECUTION\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 A TEST CONDITION is a possible way to test an application and is a constraint that the tester must follow to test the application.It is possible to have multiple test condition for a particular Test Scenario.\
\

\f0\b Identifying Test Condition
\f1\b0 \
Test Analysis is used to determine the Test Condition.It is a process which checks whether some data can be used to derive test information so it is also called as test basis\
\

\f0\b Importance of Test Data
\f1\b0 \
Test data is the core of any testing process, if the test data is inadequately prepared or designed then it won\'92t be able to cover all the possible Test Case scenarios, which will affect the quality of the product.Hence test data is of utmost importance for any software development life cycle.\
\

\f0\b Test Data Creation\

\f1\b0 Manual Data Creation,Copy production data to testing environment ,Copy testing data from legacy client system,Generating test data using automated testing data generation tool\
\

\f0\b SOFTWARE TESTING LIFE CYCLE\
STLC- 
\f1\b0 describes all the stages that are involved during the testing of a software or an application.However there is no standard  procedure but a generic way is mentioned bellow:\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0
\f0\b \cf0 {\listtext	\uc0\u8226 	}Requirement analysis- 
\f1\b0 Software requirement and designed is reviewd\
\ls10\ilvl0
\f0\b {\listtext	\uc0\u8226 	}Test Planning-
\f1\b0 Once decided what is needed to be tested, test planning tstarts\
\ls10\ilvl0
\f0\b {\listtext	\uc0\u8226 	}Test Case Development-
\f1\b0 After detailed analysis,Test Case development starts\
\ls10\ilvl0
\f0\b {\listtext	\uc0\u8226 	}Environment Setup-
\f1\b0 which is a replication of end user\'92s environment\
\ls10\ilvl0
\f0\b {\listtext	\uc0\u8226 	}Test Execution-
\f1\b0 Test Cases or scripts are executed to see if they pass
\f0\b \
{\listtext	\uc0\u8226 	}Test Reporting-
\f1\b0 Different kind of test report are generated for different stakeholders
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Categories of Test Design Technique\
\
Test Cases are designed typically in three ways:
\f1\b0 \

\f0\b \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	1.	}Designing Test Cases directly from requirement also known as black box testing-                      * 
\f1\b0 State Transition Diagrams  is defined as the testing technique in which changes in input conditions causes state change in the application or software under test.                                                    *Boundary Values Testing  is used when it is nearly impossible to test a large pool of Test Cases separately                                                                                                                                *Equivalence Partitioning, firstly set of Test Condition is divided into a partition that can be considered
\f0\b \
{\listtext	2.	}Designing Test Cases directly from the structure or component                                                     * 
\f1\b0 Statement Coverage-The Test Case is executed in such a way that every statement of the code is executed at least once                                                                                                                        *Branch Coverage  requires enough Test Cases such that each condition in a decision takes on all possible outcomes at least once.It also evaluates all the branches in the code  and makes sure that no branch of the application behaves abnormally                                                                                   *Path Coverage checks if every statement in the program is executed at least one time.Flow, Graph,Cyclomatic,Complexity and Graph Metrics are used to arrive at basis path\
\ls11\ilvl0
\f0\b {\listtext	3.	}Designing Test Cases based on tester\'92s experience and intuition                                                   * 
\f1\b0 Exploratory Testing ventures into the product it is still in great flux and not yet ready for automation.It might be useful if the tester is really an expert to identify those special tests which are not easily captured by formalized method                                                                                                                  * Error guessing-Highly experienced Testers evaluates a program by running an attack that exposes defects.Error guessing is unstructured approach of software testing.
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \

\f0\b Test Scenario Design\
\

\f1\b0 How shoulda test scenario be checked and how the system responds for those inputs should also be checked.Let\'92s take an example of a login page of some website\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when valid email id and password is entered\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when invalid email id and valid password is entered\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when valid email id and invalid password is entered\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when invalid email id and invalid password is entered\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when email id and password are left blank and Sign in entered\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response password is working as expected\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when valid/invalid phone number and password is entered\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Check the response when \'93Keep me signed in \'93 is checked\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b Dataset Generation for Testing\
\

\f1\b0 Let\'92s start with \'93What is test Data?\'94\
Test data is documented data that is basically used to test the software program\
Test data is divided into two sub categories:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\uc0\u8226 	}Positive Data-data which is generally given to the system to generate expected results\
{\listtext	\uc0\u8226 	}Negative Data-data which is used to test exceptional, unexpected and extreme conditions\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0

\f0\b \cf0 \
Guidelines for Test Data Creation\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0

\f1\b0 \cf0 Certain guidelines are followed worldwide for Test Data generation, it is important to follow these guidelines in order to test the complete product functionality:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls14\ilvl0
\f0\b \cf0 {\listtext	1.	}No data:
\f1\b0  Run your Test Cases on blank or default data.See if proper error messages are generated.\
\ls14\ilvl0
\f0\b {\listtext	2.	}Valid data set:
\f1\b0  Create it to check if the application is functioning as per requirements and valid input data is properly saved in database or files.\
\ls14\ilvl0
\f0\b {\listtext	3.	}Invalid data set:
\f1\b0 Prepare invalid data set to check application behavior for negative values, alphanumeric string inputs\
\ls14\ilvl0
\f0\b {\listtext	4.	}Illegal Data format:
\f1\b0 Make one data set of illegal data format.The system should not accept data in invalid or illegal format. Also,check proper error messages are generated\
\ls14\ilvl0
\f0\b {\listtext	5.	}Boundary Condition dataset:
\f1\b0  Dataset containing out of range data.Identify application boundary cases and prepare data set that will cover lower as well as upper boundary conditions\
\ls14\ilvl0
\f0\b {\listtext	6.	}The dataset for performance, load and stress testing
\f1\b0 : This data set should be large in volume.This way, creating separate datasets for each Test Condition will ensure complete test coverage.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
Four Levels of Test Case Writing\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	1.	}
\f1\b0 In the first level, basic Test Cases based upon information provided in user documentation and specification sheet are written\
\ls15\ilvl0
\f0\b {\listtext	2.	}
\f1\b0 In the second level, test Cases based upon the functional and system of the software are written\
\ls15\ilvl0
\f0\b {\listtext	3.	}
\f1\b0 In the third level, small Test Cases are added to create a single Test Case that covers all of them\
\ls15\ilvl0
\f0\b {\listtext	4.	}
\f1\b0 In the fourth level the project is automated and focus on testing the updated functionalities and regression testing\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\cf0 Important factors involved in writing Test Cases\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	1.	}
\f1\b0 Whenever requirements alter or changes,Test Cases should be revised and updated accordingly\
\ls16\ilvl0
\f0\b {\listtext	2.	}
\f1\b0 Test Cases can be distributed among the testers as they will be assigned some categories\
\ls16\ilvl0
\f0\b {\listtext	3.	}
\f1\b0 A single test Case may contribute to several test Conditions and a single test Condition may consist of multiple test Cases\
\ls16\ilvl0
\f0\b {\listtext	4.	}
\f1\b0 Test Cases can be interdependent on each other and this tendency is more visible when checked for medium to large application with a bit complex logic\
\ls16\ilvl0
\f0\b {\listtext	5.	}
\f1\b0 test Cases are distributed among the developers as they are directly used by them in order to build their logic and cover all the required scenarios\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 How to write Test Cases?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0
\f1\b0 \cf0 {\listtext	1.	}Test Cases should be kept neither too simple nor too complex\
{\listtext	2.	}After the proper documentation of the Test Cases,review it from the Tester\'92s point of view\
{\listtext	3.	}Let the testers decide the test data item values but never let them choose the test data items by themselves\
{\listtext	4.	}As a qA member, try not to hesitate while giving any suggestion if it can improve something\
{\listtext	5.	}Never forget the end user at any stage of Test Case writing\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
Test sheet Generation\

\f1\b0 Test sheet or a test template helps testers to create th Test Cases for a particular test scenario to check whether the features of an application are working as they are suppose to or not.most of the companies are using test management tools such as Jira,Bugzilla but some of them are still using excel sheet\
\

\f0\b Few important fields for Test Sheet\

\f1\b0 While creating test sheet or a test template, there are some important fields that must be added during the preparation\
Project Name,Module Name,Reference doc, Created by,Date of creation,Reviewed by,Date of Review,Executed by,Data of execution, test Case Id- the unique test id for every Test Case,test scenario-the name of the test scenario,Test Case title of the Test Case,Pre condition,Test Steps,Test data,Expected results, post condition ,Actual results,Status	\
\

\f0\b Test management\

\f1\b0 \
Test Management is basically a set of activities which covers the whole testing phase, from the start to the end of testing.It provides a perfect order to testing.\
Test Management is mainly of two types:\

\f0\b Planning
\f1\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\uc0\u8226 	}Risk analysis helps in early risk detection and identification of its solution will help Test Manager to save from potential loss in future\
{\listtext	\uc0\u8226 	}Test Estimation leads to better planning, execution and monitoring of tasks and allows for more accurate scheduling and help analyze results more confidently\
{\listtext	\uc0\u8226 	}Test planning defined as a document describing the scope, approach, resources, and schedule of the required testing activities is particularly important in large software system development\
{\listtext	\uc0\u8226 	}Test Organization-helps to assemble a skilled team to run the ever growing testing engine effectively so that everything goes according to the test plan\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 Execution
\f1\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0\cf0 {\listtext	\uc0\u8226 	}Test Monitoring and control - it is a procedure to collect, record and report the information about the project activity that the project manager and stakeholder should know.Controlling checks whether data from monitoring activity to bring actual performance to planned performance is being executed or not\
{\listtext	\uc0\u8226 	}Issue Management - When the risk happens, it becomes an issue and issue Management is done so that risk can be avoided.Some types of risk are missing of deadlines, exceeding the project budget and losing of customer\'92s trust\
{\listtext	\uc0\u8226 	}Test report and Evaluation-It shows the results of the Testing as test coverage and exit criteria.The data that are used in test Evaluation are based on the test results data and test result summary\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0

\f0\b \cf0 Introduction to JIRA\
\
Jira 
\f1\b0 is the leading software development app which has been developed by Atlassian and is being frequently used by agile teams.It allows team members to plan, track, and release effective software and also let users create user stories and issues, plan sprints and assign task to the team members\

\f0\b Jira
\f1\b0  can be integrated with a dedicated, third party test manager or customized to perform lightweight test management.Some features of Jira that proves to be useful for our Test Case management are:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	
\f3 \uc0\u9642 
\f1 	}Jira can link to bugs and requirements \
{\listtext	
\f3 \uc0\u9642 
\f1 	}It is good for manual testing\
{\listtext	
\f3 \uc0\u9642 
\f1 	}it works for custom issue types such as Test Case and user story\
{\listtext	
\f3 \uc0\u9642 
\f1 	}It provides quick fix for versions\
{\listtext	
\f3 \uc0\u9642 
\f1 	}it has automatic and manual issue assignment\
{\listtext	
\f3 \uc0\u9642 
\f1 	}its workflow can controls QA,developers as well as tester actions\
{\listtext	
\f3 \uc0\u9642 
\f1 	}It has subtasks for manual testing\
{\listtext	
\f3 \uc0\u9642 
\f1 	}it helps to integrate with source code repository\
{\listtext	
\f3 \uc0\u9642 
\f1 	}it has features for reporting\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\f0\b Introduction to GUI and API\
GUI API
\f1\b0  are entirely different things.Gui(Graphical user Interface) is all those things that appear on the webpage or mobile application screen like tabs, buttons, dialog boxes, icons\
Whereas API(Application Programming Interface) provides a software developer with option to incorporate a software module,that has already been developed and provided by other programmers or systems, into a software package now being developed.Basically API is a set of routines ,protocols, and tools, which can be used for building software applications\

\f0\b \
GUI Testing
\f1\b0  it is the process of testing the system\'92sor application\'92s Graphical User Interface and involves checking of the screens with the controls like menus, buttons, icons and all types of bars - toolbar, menu bar, dialog boxes, and windows.Its main focus is to test the look and feel of an application.\
Examples of Test Cases in GUI Testing\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	
\f3 \uc0\u9642 
\f1 	}Checking the alignment of the texts and other elements like icons, buttons are properly placed\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing the colors of the fonts\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Validating the colors of the error messages, warning messages\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing whether th image are clear enough\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing of alignments of images\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing the spelling mistakes\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing whether the interface is attractive enough\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing of the scrollbars according to the size of the page\
{\listtext	
\f3 \uc0\u9642 
\f1 	}Testing of all the fields are enabled or not\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0

\f0\b \cf0 \
API Testing 
\f1\b0 Involves testing APIs directly and also as a part of integration testing to evaluate whether the API meets expectations in terms of functionality, reliability, performance and security of an application\
Some of the common tests we perform on APIs are as follows:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0
\f0\b \cf0 {\listtext	\uc0\u8226 	}
\f1\b0 To verify whether the return value is based on input condition.response of the APIs should be verified based on the request\
\ls22\ilvl0
\f0\b {\listtext	\uc0\u8226 	}
\f1\b0 To check whether the system is authenticating the outcome when the API is updating any data structure\
\ls22\ilvl0
\f0\b {\listtext	\uc0\u8226 	}
\f1\b0 To validate whether the API triggers some other event or request another ApI
\f0\b \
{\listtext	\uc0\u8226 	}
\f1\b0 To verify the behavior of the ApI when there is no return value
\f0\b \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\cf0 Test Cases for Api testing\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls23\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f1\b0 It\'92s easy to test since input can be defined, and results can be authenticated\
\ls23\ilvl0
\f0\b {\listtext	\uc0\u8226 	}
\f1\b0 If there is no return values behavior of API on the system should be checked\
\ls23\ilvl0
\f0\b {\listtext	\uc0\u8226 	}
\f1\b0 If an output of an API triggers some event or interrupt, then those events and interrupt listeners should be tracked\
\ls23\ilvl0
\f0\b {\listtext	\uc0\u8226 	}
\f1\b0 Updating data structure will have some outcome or effect on the system, and that should be authenticated
\f0\b \
{\listtext	\uc0\u8226 	}
\f1\b0 If API call modifies some resources then it should be validated by accessing respective resources
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Problems without Bug Tracking tools\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	1.	}Use of different Bug Tracking template\
{\listtext	2.	}Choosing the best Bug Tracking tool\
{\listtext	3.	}Improper bug logging processes\
{\listtext	4.	}Improper set up of Security & Priority\
{\listtext	5.	}No control on Test Environment\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f1\b0 Introduction to Bug and Issue Tracking tool\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls25\ilvl0
\f0\b \cf0 {\listtext	\uc0\u9642 	}
\f1\b0 It helps software teams with finding, recording and keeping tracks of bugs in their software\
{\listtext	\uc0\u9642 	}Everyone on the team must be able to find and record bugs, and also it should be assigned to the right team members at the right time\
{\listtext	\uc0\u9642 	}A great bug an issue tracker provides the team a single view of all items in the backlog\
{\listtext	\uc0\u9642 	}It doesn\'92t matters if the work item is a bug or a task related to a new feature development\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Jira is the leading software development app which has been developed by Atlassian and is being frequently used by agile teams.It allows team members to plan track and release effective software and also let users create user stories and issues, plan sprints and assign tasks to the team members\
\
\
Jira Workflow\
Plan\'97>Jira as a tool is quite handy and helps to create user stories and issues, plan sprints and also share tasks across the software team\
Track\'97>Jira evaluate ,prioritize and discuss the team\'92s work in full context with complete visibility\
Release\'97>Jira always keeps the information up to date so that team members can ship with confidence and sanity\
Report\'97> It helps in improving the team performance based on real-time, visual data that team can use somewhere if required \
\
How to report Bug using Jira?\
Create a CERN account\
Log into Jira using CERN account\
Before reporting your issue ,search for that issue cause It might have been reported by someone else\
Create an issue and select the project and issue type.You will get those option after clicking on Create Issue\
Add the details such as summary, priority, components ,affected versions, assignee, reporter, environment etc\
\

\f0\b Categorization of Bugs\
\

\f1\b0 Bugs have been mainly categorized on the basics of :\

\f0\b Severity
\f1\b0  - Serious bugs come under this category. These are those bugs whose functionality is crucial for the software and if that bug is not fixed then other functionality of the software will also get affected.\
\

\f0\b Priority
\f1\b0  - In this category, the bugs are classified on the basis of their priority which can be high to and it is important to resolve those first whose priorities are high from business point of view\
\

\f0\b Detailed Categorization of Bugs\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0
\f1\b0 \cf0 {\listtext	1.	}
\f0\b High priority, Low severity:
\f1\b0  Bug which is very important to fix but is not very severe such as application name logo not displaying comes under this category.\
{\listtext	2.	}
\f0\b Low priority, High severity:
\f1\b0  Bug which don\'92t require immediate attention and is not very serious come under this category.\
{\listtext	3.	}
\f0\b Low priority, Low severity:
\f1\b0  Bug such as a spelling mistake comes under this category.\
{\listtext	4.	}
\f0\b High priority, High severity: 
\f1\b0 Bugs such as payment related issues where customer paid the amount for some product and is being asked to pay for it again comes under this category\uc0\u8747 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \
Introduction to Test Environment
\f1\b0 \
\
Test Environment is basically a replica of actual production environment which is provided to the end user with close enough hardware and software configurations, where the testing happens for the application that have been developed.\
\
Different Test Environment: \
Development - Unit tests are done by developers in this environment\
System Test- All the test cases are executed, exploratory tests are performed, defect retesting and regression\
Performance Test - It\'92s a replica of more efficient production environment with fewer servers, capacity, memory, etc\
User Acceptance Test - After successful System testing, the build is deployed in UAT environment for User Acceptance tests.Once UAT team confirms the application is deployed in live environment\
Here the end-user access the application.For ex- Accessing Net-banking application in \'91production environment\'92 to initiate transfers\
\
Importance of Test Environments\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls27\ilvl0\cf0 {\listtext	\uc0\u9642 	}It helps to test the application in multiple environments\
{\listtext	\uc0\u9642 	}It reduces the chance of failure or crash of an application because of being tested at multiple environments\
{\listtext	\uc0\u9642 	}It checks the functional and non-functional aspect of an application in different environment\
{\listtext	\uc0\u9642 	}It improves the performance of the end product or application by hardcore testing\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
}