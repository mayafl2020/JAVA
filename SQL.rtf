{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid901\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1001\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}}
\margl1440\margr1440\vieww18100\viewh4620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0  Relational Database Management System(RDBMS)\
\

\f1\b0 In relational databases, the relationship between data files is relational.These databases connect to the data in different files by using common data numbers or a key field.Data in relational databases is stored in different access control tables, each having a key field that mainly identifies each row.In relational databases, tables or files filled up with data are called relations designates a row record and columns are referred to as attributes or fields\
\
In the relational database we have to follow some properties:\
It\'92s Values are Atomic\
In Each Row is alone\
Column Values are of the same thing\
Columns are undistinguished\
Sequence of Rows is insignificant\
Each Column has a common Name\
\
Normalization is the process of organizing data to avoid duplication and redundancy\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}To minimize duplicate data\
{\listtext	\uc0\u8226 	}To minimize or avoid data modification issues\
{\listtext	\uc0\u8226 	}To simplify queries\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Normalization Types\
\
Normalization rule are divided into following normal form:\
First Normal Form\
Second Normal Form\
Third Normal Form\
Boyce and Todd Normal Form(BCNF)\
\
First Normal Form\
\
As per First Normal Form:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u9642 	}Each set of column must have a unique value, such that multiple columns cannot be used to fetch the same row\
{\listtext	\uc0\u9642 	}Each table should be organized into two, and each row should have a primary key that identifies it as unique\
{\listtext	\uc0\u9642 	}The Primary key is usually a single column, but sometimes more than one column can be combined to create a single primary key\
{\listtext	\uc0\u9642 	}Using the First Normal Form, data redundancy increases, as there will be many columns with same data in multiple rows but each row as a whole will be unique \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\cf0 Second Normal Form - 2NF\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u9642 	}There must not be any partial dependency of any column on primary key\
{\listtext	\uc0\u9642 	}A table that has concatenated primary key, each column in the table that is not part of the primary key must depend upon the entire concatenated key for its existence\
{\listtext	\uc0\u9642 	}If any column depends only on one part of the concatenated key, then the table fails Second normal form\
{\listtext	\uc0\u9642 	}In example of First Normal Form there are two rows for Adam, to include multiple subjects that he has opted for\
{\listtext	\uc0\u9642 	}The candidate key is \{Student,Course\},Age of Student only depends on Student column, which is incorrect as per Second Normal Form\
{\listtext	\uc0\u9642 	}To achieve second normal format would be helpful to split out the subjects into an independent tableland match them up using the student names as foreign keys\
{\listtext	\uc0\u9642 	}In Subject Table the candidate key will be \{Student,Course\} column.Now,both the above tables qualifies for Second Normal Form and will never suffer from Update Anomalies\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Third Normal Form - 3NF\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u9642 	}Third Normal form applies that every non-prime attribute of table must be dependent on primary key, or we can say that, there should not be the case that a non-prime attribute is determined by another non-prime attribute\
{\listtext	\uc0\u9642 	}So this transitive functional dependency should be removed from the table and also the table must be in Second Normal form\
{\listtext	\uc0\u9642 	}Student Detail Table:\
{\listtext	\uc0\u9642 	}Student_id.  Student_name  DOB. Street. City. State Zip\
{\listtext	\uc0\u9642 	}in this table Student_id is Primary key, but street, city and state depends upon zip.The dependency between zip and other fields is called transitive dependency.Hence to apply #NF,we need to move the street, city and state to new table, with Zip as primary key\
{\listtext	\uc0\u9642 	}New Student_Detail Table:\
{\listtext	\uc0\u9642 	}Student_id. Student_name DOB Zip\
{\listtext	\uc0\u9642 	}Address Table\
{\listtext	\uc0\u9642 	}Zip. Street.  City.  State\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Boyce and Todd Normal Form (BCNF)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u9642 	}Third Normal form applies that every non-prime attribute of table must be dependent on primary key, or we can say that, there should not be the case that a non-prime attributes is determined by another non prime attribute\
{\listtext	\uc0\u9642 	}So this transitive functional dependency should be removed from the table and also the table must be in Second Normal form\
{\listtext	\uc0\u9642 	}Student Detail Table:\
{\listtext	\uc0\u9642 	}Student_id.  Student_name DOB Street city State Zip\
{\listtext	\uc0\u9642 	}In this table Student_id is Primary key, but street, city and state depends upon zip.The dependency between zip and other field is called transitive dependency.Hence to apply 3nF, we need to move the street, city and state to new table, with Zip as primary key\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 New Student_Detail Table:\
Student_id. Student_name. DOB Zip\
Address Table\
Zip.  Street. City.  State\
\
Data Types in SQL\
\
A data type is an attribute that specifies the type of data that object can hold:integer data, character data, monetary data, date and time data, binary strings, and so on\
\
Basic SQL Statements\
\

\f0\b Data Definition Language 
\f1\b0 - Deals with database schemas and descriptions, of how the data should reside in the database\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\uc0\u8226 	}Create\
{\listtext	\uc0\u8226 	}Alter\
{\listtext	\uc0\u8226 	}Drop\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 Data Manipulation Language - 
\f1\b0  Deals with data manipulation, and includes most common SQL statements, and it is used to store, modify, retrieve, delete and update data in database\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\uc0\u8226 	}Select\
{\listtext	\uc0\u8226 	}Insert\
{\listtext	\uc0\u8226 	}Update\
{\listtext	\uc0\u8226 	}Delete\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 Data Control Language-
\f1\b0 Includes commands such as GRANT and mostly concerned with rights permissions and other controls of the database system\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0
\f0\b \cf0 {\listtext	\uc0\u8226 	}
\f1\b0 Grant\
\ls8\ilvl0
\f0\b {\listtext	\uc0\u8226 	}
\f1\b0 Revoke
\f0\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Transaction Control Language- 
\f1\b0  Deals with transaction within a database\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\uc0\u8226 	}Commit\
{\listtext	\uc0\u8226 	}Rollback\
{\listtext	\uc0\u8226 	}Sacepoint\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Create Database Objects\
The CREATE DATABASE statement is used to create a new SQL database\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\uc0\u9642 	}CREATE DATABASE <database_name>\
{\listtext	\uc0\u9642 	}Create database with Options\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Use master\
Go\
CREATE DATABASE Employees ON (\
NAME = Employees_dat,\
FILENAME = \'91<valid path>/ Employeesdat.mdf\'92,\
SIZE = 10\
MAXSIZE = 50 \
FILEGROWTH = 5)\
\
LOG ON (NAME = Employees_log,\
FILENAME = \'91<valid path>/Employeeslog.ldf\'92,\
SIZE = 5MB\'92\
MAXSIZE = 25MB,\
FILEGROWTH = 5MB);\
\
\
Create Table Statements\
\
The CREATE TABLE statement is used to create a new table in selected database\
\
CREATE TABLE <table _name> (\
Column A datatype,\
Column B datatype\
);\
\
Example:\
\
Create table  EMPLOYEE(\
     emp_id numeric (4),\
     first_name varchar(20),\
     last_name varchar (20),\
     mgr_id numeric(4),\
     hire_date date,\
     job_id numeric(2),\
     deptno numeric (2)\
);\
\
Alter Table Statements\
Alter Table is used to:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\uc0\u9642 	}Add,Delete,Modify columns from existing table\
{\listtext	\uc0\u9642 	}Add/Drop constraints on an existing table\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ALTER TABLE <table_name> ADD <column_name><datatype>\
ALTER TABLE <table_name>DROP column <column_name>\
ALTER TABLE<table_name>ALTER COLUMN<column_name><datatype>\
\
Example\
ALTER TABLE employee ADD salary numeric(10,2);\
ALTER TABLE employee DROP COLUMN job_id;\
ALTER TABLE employee ALTER COLUMN first_name varchar (25);\
\
Drop Table Statements \
The DROP TABLE  statement is used to drop a table from selected database\
\
DROP TABLE <table_name>;\
\
Example:\
DROP TABLE employee;\
\
Various Constraints\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\uc0\u9642 	}Constraints enforce rules on the table whenever rows are inserted, updated and deleted from the table\
{\listtext	\uc0\u9642 	}Prevents the deletion of a table if there are dependencies from other tables\
{\listtext	\uc0\u9642 	}Define the constraints at column or table level\
{\listtext	\uc0\u9642 	}Constraints can be applied during creation of table or after table creation by using alter command\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
NOT NULL - Specifies that a column must have some value\
UNIQUE- Specifies that column must have unique values\
PRIMARY KEY - Specifies a column or a set of columns that uniquely identifies a row.It does not allow null values\
FOREIGN KEY - Foreign key is a column(s) that references a column(s) of a table\
CHECK - Specifies a condition that must be satisfied by all th rows in a table\
\
Example:\
Constraint while creating a table\
\
CREATE TABLE. employee(\
        emp_id numeric(4) PRIMARY KEY,\
        first_name varchar (20) NOT NULL,\
        last_name varchar (20) NOT NULL,\
        mgr_id numeric (4) NOT NULL,\
        phone_numeric VARCHAR (20) UNIQUE,\
        job_id numeric(2),\
        deptno numeric (2)\
);\
\
Add constraint to existing table:\
ALTER TABLE  employee ADD CONSTRAINT pk_empid PRIMARY KEY (emp_id);\
Drop constraint from existing table\
ALTER TABLE employee DROP CONSTRAINT pk_empid;\
\
Creating Views\
A view is a named, derived, virtual table.A view takes the output of a query and treats it as a table\
\
CREATE VIEW <view_name> AS SELECT * FROM <table_name>;\
\
Example\
\
CREATE VIEW VW_EMPLOYEE AS SELECT * FROM employee;\
\
To query the above view:\
SELECT * FROM VW_EMPLOYEE\
\
Create view with specific columns\
\
CREATE VIEW VW_EMPLOYEE \
AS SELECT emp_id\
                   , first_name\
                   , last_name\
                   , mgr_id\
                   , job_id\
                   ,deptno\
FROM employee\
\
\

\f0\b DML COMMANDS\
\

\f1\b0 This language constitutes the statements that are used to manipulate with the data.It has commands like:\

\f0\b INSERT\
UPDATE\
DELETE\
SELECT\
\

\f1\b0 Insert statements\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\uc0\u8226 	}Insert command is used to Insert data/record into the database table\
{\listtext	\uc0\u8226 	}Inserting values for the specific columns in the table(Always include the columns which are not null)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Insert Intro <Table-Name> (Fieldname1,FielHR2,Fieldname3,..)Values(value1,value2,value3,\'85);\
\
Example\
SQL \
insert into dept (deptno,dept_name) values(20,\'92HR\'92);\
If we want to insert values in all columns then no need to specify column values, but order of column values should be in sync with the column names.\
Example\
Insert into dept values(20,\'92HR\'92);\
\
Insert- As-Select  Statement\
Insert As Select statement allows to insert into a table using the input from another table.record from one table will be inserted in another table\
\
INSERT INTO table-name(column-names)\
SELECT column-names\
FROM table-name\
WHERE condition\
Syntax:\
Insert into <new_table_name>(Select<columnnames> from <old_table_names>);\
Example\
Insert into CopyOfEmployee select * from employee where emp_id > 100\
\
Update Statements\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls14\ilvl0\cf0 {\listtext	\uc0\u9642 	}Update Statement updates/modify the existing data in the tables.Using these statements we can update the value of a single column or multiple columns in a single statement\
{\listtext	\uc0\u9642 	}Updating single column\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Syntax:\
UPDATE <table_name>Set<Field Name> = < Value> Where <Condition>;\
Example:\
update dept set loc = \'91Pink City\'92 , dept_name = \'91HR\'92 where deptno = 20;\
\

\f0\b Delete Statements\

\f1\b0  Delete commands helps to delete rows/record from database table.Delete Statements can be executed with or without where conditions.Execution of delete commands without where condition will remove all the records/rows from the table\
\
Syntax:\
Delete from <table name>[where <condition>];\
Example\
A) to delete all rows (Deleting all rows without where condition);\
\
SQL.  Delete from dept;\
\
B) conditional deletion (deleting records with where condition);\
Delete from dept where loc = \'91Pink City\'92;\
\

\f0\b Select Statement\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0
\f1\b0 \cf0 {\listtext	\uc0\u8226 	}These statements help us to retrieve records from data table\
{\listtext	\uc0\u8226 	}Where condition is optional in select statements.Various operators can be used in where conditions for data retrieval\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Syntax:\
Select<field1,field2,\'85fieldn> from <table name> where <condition>;\
\
Example:\
To include all columns of table in output.\
A) select * from dept;( * fetches all columns in output)\
B) select dept_name,loc from dept;\
\
Using Alias name for a field\
\
Select<col1><alias name 1>,<col2><alias name 2> from <tab1>;\
Example\
Changing the name of column using Alias in output.\
Select dept_name,loc as location from dept;\
\

\f0\b\fs36 Select Statement: Distinct Values
\f1\b0\fs24 \
Distinct Values:\
Used to relieve unique values for a column.Multiple rows can have same values for a column, distinct keyword in select statement helps us to retrieve unique rows for a column\
\
Syntax\
Select distinct <col2> from <tab1>;\
Example\
Select rows with distinct values from a column\
Select distinct loc from dept;\
\

\f0\b Ordering Result\
\

\f1\b0 ORDER BY\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	\uc0\u9642 	}Used along with where clause to display the specified column in ascending order or descending order\
{\listtext	\uc0\u9642 	}Default is ascending order\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Syntax\
\
SELECT[distinct]<column(s)>\
FROM <table>\
[WHERE <condition>]\
[ORDER BY <column(s)[asc|desc]>\
Example\
\
SELECT first_name,deptno,hire_date\
FROM employee\
ORDER BY deptno ASC,hire_date desc;\
\

\f0\b Filtering:Logical Operators\
\

\f1\b0 Logical Operators(AND,OR and NOT)\
Used in were conditions to join more than two queries.used to combine the results of two or more conditions to produce single result\
\

\f0\b AND Logical Operator:\

\f1\b0 Used to combine two conditions and it fetches the result which satisfy both the conditions\
\
Example\
\
Select first_name,last_name from employee where first_name =\'91Miller\'92 AND last_name = \'91Ward\'92;\
\
Select first_name,deptno,salary from employee\
Where salary > 20000 and salary <350000;\
\

\f0\b Logical Operator: OR\

\f1\b0  OR operators is used to combine two or more conditions and it fetches the result with satisfy any one of the condition in OR statements\
\
Select first_name,last_name from employee where first_naem = \'91Miller\'92 OR last_name = \'91Ruth\'92;\
\

\f0\b  Logical Operator: NOT\

\f1\b0 NOT operator is used to negate the conditions and it fetches opposite of the result with satisfy the condition.It is used in combination with other keywords like NOT IN, NOT between etc\
Example:\
Select dept_name,loc from dept where loc not in(\'91Chennai\'92,\'92Bangalore\'92);\
\

\f0\b Filtering:Comparison Operator\

\f1\b0 Comparison Operatorrs (=,!=,<>,>=,<=,LIKE,BETWEEN,IN): Comparison operators are used in WHERE condition to fetch results from table\
\

\f0\b Between Operator:
\f1\b0 \
The BETWEEN operator is used to search for values that are within a set of values\
\
Select first_name,deptno from employee where salary between 200000 and 3500000;\

\f0\b \
Comparison Operator: NOT IN
\f1\b0 \
\
Select dept_name,loc from dept where loc not in (\'91Chennai\'92,\'92Bangalore\'92);\
\

\f0\b Comparison Operator: IN\
IN Operator:\
\

\f1\b0 Fetches values from a set of literals.It is used to test whether or not a value is \'93in\'94 the list of values provided after the keyword IN.The IN condition can be used with any data type in SQL\
\
Select first_name,deptno from employee where job in (\'91J1\'92,\'92J2\'92);\
\

\f0\b Comparison Operator: Example\
\

\f1\b0  \'91=\'91 Fetches values equals to given value.\
Select first_name,deptno,salary from employee where salary = 30000;\
\

\f0\b Comparison Operator: LIKE condition\
\

\f1\b0  LIKE condition to perform wild card searches of valid search string values\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf0 {\listtext	\uc0\u9642 	}Search conditions can contain either characters or numbers\
{\listtext	\uc0\u9642 	}% denotes zero or many characters\
{\listtext	\uc0\u9642 	}_ denotes one character\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Select dept_name,loc from dept where loc like \'91c%\'92;\
\
Select dept_name,loc from dept where loc like \'91chen___\'92;\
\
Select dept_name,loc from dept where loc not like\'92c%\'92;\
\

\f0\b  Case Expression\

\f1\b0 Used as type of IF-THEN-ELSE statement .CASE is used to provide if-then-else type of logic to SQL\
\
Syntax\
CASE column_naem\
WHEN condition1 THEN result1\
WHEN condition2 THEN result2\
ELSE result\
END\
\
Example\
DECLARE @intInput INT\
SET @intInput = 2\
SELECT CASE (@intINput) WHEN 1 THEN \'91One\'92\
When 2 then \'92Two\'92\
WHEN 3 THEN \'91Three\'92\
Else \'91Your message\'92\
END\
\
\
}